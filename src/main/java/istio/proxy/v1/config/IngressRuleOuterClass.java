// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proxy/v1/config/ingress_rule.proto

package istio.proxy.v1.config;

import com.google.protobuf.*;

public class IngressRuleOuterClass {

    private IngressRuleOuterClass() {
    }

    public static void registerAllExtensions(
            ExtensionRegistryLite registry) {
    }

    public static void registerAllExtensions(ExtensionRegistry registry) {
        registerAllExtensions((ExtensionRegistryLite) registry);
    }

    public interface IngressRuleOrBuilder extends
            // @@protoc_insertion_point(interface_extends:IngressRule)
            MessageOrBuilder {

        /**
         * <pre>
         * REQUIRED: Port on which the ingress proxy listens and applies the rule.
         * </pre>
         * <p>
         * <code>int32 port = 1;</code>
         */
        int getPort();

        /**
         * <pre>
         * Optional TLS secret path to apply server-side TLS context on the port.
         * It is up to the underlying secret store to interpret the path to the secret.
         * </pre>
         * <p>
         * <code>string tls_secret = 2;</code>
         */
        java.lang.String getTlsSecret();

        /**
         * <pre>
         * Optional TLS secret path to apply server-side TLS context on the port.
         * It is up to the underlying secret store to interpret the path to the secret.
         * </pre>
         * <p>
         * <code>string tls_secret = 2;</code>
         */
        ByteString
        getTlsSecretBytes();

        /**
         * <pre>
         * RECOMMENDED. Precedence is used to disambiguate the order of application
         * of rules. A higher number takes priority. If not specified, the value is
         * assumed to be 0.  The order of application for rules with the same
         * precedence is unspecified.
         * </pre>
         * <p>
         * <code>int32 precedence = 3;</code>
         */
        int getPrecedence();

        /**
         * <pre>
         * Match conditions to be satisfied for the ingress rule to be
         * activated.
         * </pre>
         * <p>
         * <code>.MatchCondition match = 4;</code>
         */
        boolean hasMatch();

        /**
         * <pre>
         * Match conditions to be satisfied for the ingress rule to be
         * activated.
         * </pre>
         * <p>
         * <code>.MatchCondition match = 4;</code>
         */
        RouteRuleOuterClass.MatchCondition getMatch();

        /**
         * <pre>
         * Match conditions to be satisfied for the ingress rule to be
         * activated.
         * </pre>
         * <p>
         * <code>.MatchCondition match = 4;</code>
         */
        RouteRuleOuterClass.MatchConditionOrBuilder getMatchOrBuilder();

        /**
         * <pre>
         * REQUIRED: Destination uniquely identifies the destination service.
         * *Note:* The ingress rule destination specification represents all version
         * of the service and therefore the IstioService's labels field MUST be empty.
         * </pre>
         * <p>
         * <code>.IstioService destination = 5;</code>
         */
        boolean hasDestination();

        /**
         * <pre>
         * REQUIRED: Destination uniquely identifies the destination service.
         * *Note:* The ingress rule destination specification represents all version
         * of the service and therefore the IstioService's labels field MUST be empty.
         * </pre>
         * <p>
         * <code>.IstioService destination = 5;</code>
         */
        RouteRuleOuterClass.IstioService getDestination();

        /**
         * <pre>
         * REQUIRED: Destination uniquely identifies the destination service.
         * *Note:* The ingress rule destination specification represents all version
         * of the service and therefore the IstioService's labels field MUST be empty.
         * </pre>
         * <p>
         * <code>.IstioService destination = 5;</code>
         */
        RouteRuleOuterClass.IstioServiceOrBuilder getDestinationOrBuilder();

        /**
         * <pre>
         * Identifies the destination service port by value
         * </pre>
         * <p>
         * <code>int32 destination_port = 6;</code>
         */
        int getDestinationPort();

        /**
         * <pre>
         * Identifies the destination service port by name
         * </pre>
         * <p>
         * <code>string destination_port_name = 7;</code>
         */
        java.lang.String getDestinationPortName();

        /**
         * <pre>
         * Identifies the destination service port by name
         * </pre>
         * <p>
         * <code>string destination_port_name = 7;</code>
         */
        ByteString
        getDestinationPortNameBytes();

        public IngressRuleOuterClass.IngressRule.DestinationServicePortCase getDestinationServicePortCase();
    }

    /**
     * <pre>
     * Ingress rules are routing rules applied to the ingress proxy pool. The
     * ingress proxes serve as the receiving edge proxy for the entire mesh, but
     * can also be addressed from inside the mesh.  Each ingress rule defines a
     * destination service and port. Rules that do not resolve to a service or a
     * port in the mesh should be ignored.
     * The routing rules for the destination service are applied at the ingress
     * proxy. That means the routing rule match conditions are composed and its
     * actions are enforced. The traffic splitting for the destination service is
     * also effective.
     * WARNING: This API is experimental and under active development
     * </pre>
     * <p>
     * Protobuf type {@code IngressRule}
     */
    public static final class IngressRule extends GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:IngressRule)
            IngressRuleOrBuilder {
        private static final long serialVersionUID = 0L;

        // Use IngressRule.newBuilder() to construct.
        private IngressRule(GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }

        private IngressRule() {
            port_ = 0;
            tlsSecret_ = "";
            precedence_ = 0;
        }

        @java.lang.Override
        public final UnknownFieldSet
        getUnknownFields() {
            return this.unknownFields;
        }

        private IngressRule(
                CodedInputStream input,
                ExtensionRegistryLite extensionRegistry)
                throws InvalidProtocolBufferException {
            this();
            if (extensionRegistry == null) {
                throw new java.lang.NullPointerException();
            }
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields =
                    UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!parseUnknownFieldProto3(
                                    input, unknownFields, extensionRegistry, tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 8: {

                            port_ = input.readInt32();
                            break;
                        }
                        case 18: {
                            java.lang.String s = input.readStringRequireUtf8();

                            tlsSecret_ = s;
                            break;
                        }
                        case 24: {

                            precedence_ = input.readInt32();
                            break;
                        }
                        case 34: {
                            RouteRuleOuterClass.MatchCondition.Builder subBuilder = null;
                            if (match_ != null) {
                                subBuilder = match_.toBuilder();
                            }
                            match_ = input.readMessage(RouteRuleOuterClass.MatchCondition.parser(), extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(match_);
                                match_ = subBuilder.buildPartial();
                            }

                            break;
                        }
                        case 42: {
                            RouteRuleOuterClass.IstioService.Builder subBuilder = null;
                            if (destination_ != null) {
                                subBuilder = destination_.toBuilder();
                            }
                            destination_ = input.readMessage(RouteRuleOuterClass.IstioService.parser(), extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(destination_);
                                destination_ = subBuilder.buildPartial();
                            }

                            break;
                        }
                        case 48: {
                            destinationServicePortCase_ = 6;
                            destinationServicePort_ = input.readInt32();
                            break;
                        }
                        case 58: {
                            java.lang.String s = input.readStringRequireUtf8();
                            destinationServicePortCase_ = 7;
                            destinationServicePort_ = s;
                            break;
                        }
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new InvalidProtocolBufferException(
                        e).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final Descriptors.Descriptor
        getDescriptor() {
            return IngressRuleOuterClass.internal_static_istio_proxy_v1_config_IngressRule_descriptor;
        }

        protected GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return IngressRuleOuterClass.internal_static_istio_proxy_v1_config_IngressRule_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            IngressRuleOuterClass.IngressRule.class, IngressRuleOuterClass.IngressRule.Builder.class);
        }

        private int destinationServicePortCase_ = 0;
        private java.lang.Object destinationServicePort_;

        public enum DestinationServicePortCase
                implements Internal.EnumLite {
            DESTINATION_PORT(6),
            DESTINATION_PORT_NAME(7),
            DESTINATIONSERVICEPORT_NOT_SET(0);
            private final int value;

            private DestinationServicePortCase(int value) {
                this.value = value;
            }

            /**
             * @deprecated Use {@link #forNumber(int)} instead.
             */
            @java.lang.Deprecated
            public static DestinationServicePortCase valueOf(int value) {
                return forNumber(value);
            }

            public static DestinationServicePortCase forNumber(int value) {
                switch (value) {
                    case 6:
                        return DESTINATION_PORT;
                    case 7:
                        return DESTINATION_PORT_NAME;
                    case 0:
                        return DESTINATIONSERVICEPORT_NOT_SET;
                    default:
                        return null;
                }
            }

            public int getNumber() {
                return this.value;
            }
        }

        ;

        public DestinationServicePortCase getDestinationServicePortCase() {
            return DestinationServicePortCase.forNumber(
                    destinationServicePortCase_);
        }

        public static final int PORT_FIELD_NUMBER = 1;
        private int port_;

        /**
         * <pre>
         * REQUIRED: Port on which the ingress proxy listens and applies the rule.
         * </pre>
         * <p>
         * <code>int32 port = 1;</code>
         */
        public int getPort() {
            return port_;
        }

        public static final int TLS_SECRET_FIELD_NUMBER = 2;
        private volatile java.lang.Object tlsSecret_;

        /**
         * <pre>
         * Optional TLS secret path to apply server-side TLS context on the port.
         * It is up to the underlying secret store to interpret the path to the secret.
         * </pre>
         * <p>
         * <code>string tls_secret = 2;</code>
         */
        public java.lang.String getTlsSecret() {
            java.lang.Object ref = tlsSecret_;
            if (ref instanceof java.lang.String) {
                return (java.lang.String) ref;
            } else {
                ByteString bs =
                        (ByteString) ref;
                java.lang.String s = bs.toStringUtf8();
                tlsSecret_ = s;
                return s;
            }
        }

        /**
         * <pre>
         * Optional TLS secret path to apply server-side TLS context on the port.
         * It is up to the underlying secret store to interpret the path to the secret.
         * </pre>
         * <p>
         * <code>string tls_secret = 2;</code>
         */
        public ByteString
        getTlsSecretBytes() {
            java.lang.Object ref = tlsSecret_;
            if (ref instanceof java.lang.String) {
                ByteString b =
                        ByteString.copyFromUtf8(
                                (java.lang.String) ref);
                tlsSecret_ = b;
                return b;
            } else {
                return (ByteString) ref;
            }
        }

        public static final int PRECEDENCE_FIELD_NUMBER = 3;
        private int precedence_;

        /**
         * <pre>
         * RECOMMENDED. Precedence is used to disambiguate the order of application
         * of rules. A higher number takes priority. If not specified, the value is
         * assumed to be 0.  The order of application for rules with the same
         * precedence is unspecified.
         * </pre>
         * <p>
         * <code>int32 precedence = 3;</code>
         */
        public int getPrecedence() {
            return precedence_;
        }

        public static final int MATCH_FIELD_NUMBER = 4;
        private RouteRuleOuterClass.MatchCondition match_;

        /**
         * <pre>
         * Match conditions to be satisfied for the ingress rule to be
         * activated.
         * </pre>
         * <p>
         * <code>.MatchCondition match = 4;</code>
         */
        public boolean hasMatch() {
            return match_ != null;
        }

        /**
         * <pre>
         * Match conditions to be satisfied for the ingress rule to be
         * activated.
         * </pre>
         * <p>
         * <code>.MatchCondition match = 4;</code>
         */
        public RouteRuleOuterClass.MatchCondition getMatch() {
            return match_ == null ? RouteRuleOuterClass.MatchCondition.getDefaultInstance() : match_;
        }

        /**
         * <pre>
         * Match conditions to be satisfied for the ingress rule to be
         * activated.
         * </pre>
         * <p>
         * <code>.MatchCondition match = 4;</code>
         */
        public RouteRuleOuterClass.MatchConditionOrBuilder getMatchOrBuilder() {
            return getMatch();
        }

        public static final int DESTINATION_FIELD_NUMBER = 5;
        private RouteRuleOuterClass.IstioService destination_;

        /**
         * <pre>
         * REQUIRED: Destination uniquely identifies the destination service.
         * *Note:* The ingress rule destination specification represents all version
         * of the service and therefore the IstioService's labels field MUST be empty.
         * </pre>
         * <p>
         * <code>.IstioService destination = 5;</code>
         */
        public boolean hasDestination() {
            return destination_ != null;
        }

        /**
         * <pre>
         * REQUIRED: Destination uniquely identifies the destination service.
         * *Note:* The ingress rule destination specification represents all version
         * of the service and therefore the IstioService's labels field MUST be empty.
         * </pre>
         * <p>
         * <code>.IstioService destination = 5;</code>
         */
        public RouteRuleOuterClass.IstioService getDestination() {
            return destination_ == null ? RouteRuleOuterClass.IstioService.getDefaultInstance() : destination_;
        }

        /**
         * <pre>
         * REQUIRED: Destination uniquely identifies the destination service.
         * *Note:* The ingress rule destination specification represents all version
         * of the service and therefore the IstioService's labels field MUST be empty.
         * </pre>
         * <p>
         * <code>.IstioService destination = 5;</code>
         */
        public RouteRuleOuterClass.IstioServiceOrBuilder getDestinationOrBuilder() {
            return getDestination();
        }

        public static final int DESTINATION_PORT_FIELD_NUMBER = 6;

        /**
         * <pre>
         * Identifies the destination service port by value
         * </pre>
         * <p>
         * <code>int32 destination_port = 6;</code>
         */
        public int getDestinationPort() {
            if (destinationServicePortCase_ == 6) {
                return (java.lang.Integer) destinationServicePort_;
            }
            return 0;
        }

        public static final int DESTINATION_PORT_NAME_FIELD_NUMBER = 7;

        /**
         * <pre>
         * Identifies the destination service port by name
         * </pre>
         * <p>
         * <code>string destination_port_name = 7;</code>
         */
        public java.lang.String getDestinationPortName() {
            java.lang.Object ref = "";
            if (destinationServicePortCase_ == 7) {
                ref = destinationServicePort_;
            }
            if (ref instanceof java.lang.String) {
                return (java.lang.String) ref;
            } else {
                ByteString bs =
                        (ByteString) ref;
                java.lang.String s = bs.toStringUtf8();
                if (destinationServicePortCase_ == 7) {
                    destinationServicePort_ = s;
                }
                return s;
            }
        }

        /**
         * <pre>
         * Identifies the destination service port by name
         * </pre>
         * <p>
         * <code>string destination_port_name = 7;</code>
         */
        public ByteString
        getDestinationPortNameBytes() {
            java.lang.Object ref = "";
            if (destinationServicePortCase_ == 7) {
                ref = destinationServicePort_;
            }
            if (ref instanceof java.lang.String) {
                ByteString b =
                        ByteString.copyFromUtf8(
                                (java.lang.String) ref);
                if (destinationServicePortCase_ == 7) {
                    destinationServicePort_ = b;
                }
                return b;
            } else {
                return (ByteString) ref;
            }
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(CodedOutputStream output)
                throws java.io.IOException {
            if (port_ != 0) {
                output.writeInt32(1, port_);
            }
            if (!getTlsSecretBytes().isEmpty()) {
                GeneratedMessageV3.writeString(output, 2, tlsSecret_);
            }
            if (precedence_ != 0) {
                output.writeInt32(3, precedence_);
            }
            if (match_ != null) {
                output.writeMessage(4, getMatch());
            }
            if (destination_ != null) {
                output.writeMessage(5, getDestination());
            }
            if (destinationServicePortCase_ == 6) {
                output.writeInt32(
                        6, (int) ((java.lang.Integer) destinationServicePort_));
            }
            if (destinationServicePortCase_ == 7) {
                GeneratedMessageV3.writeString(output, 7, destinationServicePort_);
            }
            unknownFields.writeTo(output);
        }

        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            if (port_ != 0) {
                size += CodedOutputStream
                        .computeInt32Size(1, port_);
            }
            if (!getTlsSecretBytes().isEmpty()) {
                size += GeneratedMessageV3.computeStringSize(2, tlsSecret_);
            }
            if (precedence_ != 0) {
                size += CodedOutputStream
                        .computeInt32Size(3, precedence_);
            }
            if (match_ != null) {
                size += CodedOutputStream
                        .computeMessageSize(4, getMatch());
            }
            if (destination_ != null) {
                size += CodedOutputStream
                        .computeMessageSize(5, getDestination());
            }
            if (destinationServicePortCase_ == 6) {
                size += CodedOutputStream
                        .computeInt32Size(
                                6, (int) ((java.lang.Integer) destinationServicePort_));
            }
            if (destinationServicePortCase_ == 7) {
                size += GeneratedMessageV3.computeStringSize(7, destinationServicePort_);
            }
            size += unknownFields.getSerializedSize();
            memoizedSize = size;
            return size;
        }

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof IngressRuleOuterClass.IngressRule)) {
                return super.equals(obj);
            }
            IngressRuleOuterClass.IngressRule other = (IngressRuleOuterClass.IngressRule) obj;

            boolean result = true;
            result = result && (getPort()
                    == other.getPort());
            result = result && getTlsSecret()
                    .equals(other.getTlsSecret());
            result = result && (getPrecedence()
                    == other.getPrecedence());
            result = result && (hasMatch() == other.hasMatch());
            if (hasMatch()) {
                result = result && getMatch()
                        .equals(other.getMatch());
            }
            result = result && (hasDestination() == other.hasDestination());
            if (hasDestination()) {
                result = result && getDestination()
                        .equals(other.getDestination());
            }
            result = result && getDestinationServicePortCase().equals(
                    other.getDestinationServicePortCase());
            if (!result) return false;
            switch (destinationServicePortCase_) {
                case 6:
                    result = result && (getDestinationPort()
                            == other.getDestinationPort());
                    break;
                case 7:
                    result = result && getDestinationPortName()
                            .equals(other.getDestinationPortName());
                    break;
                case 0:
                default:
            }
            result = result && unknownFields.equals(other.unknownFields);
            return result;
        }

        @java.lang.Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            hash = (37 * hash) + PORT_FIELD_NUMBER;
            hash = (53 * hash) + getPort();
            hash = (37 * hash) + TLS_SECRET_FIELD_NUMBER;
            hash = (53 * hash) + getTlsSecret().hashCode();
            hash = (37 * hash) + PRECEDENCE_FIELD_NUMBER;
            hash = (53 * hash) + getPrecedence();
            if (hasMatch()) {
                hash = (37 * hash) + MATCH_FIELD_NUMBER;
                hash = (53 * hash) + getMatch().hashCode();
            }
            if (hasDestination()) {
                hash = (37 * hash) + DESTINATION_FIELD_NUMBER;
                hash = (53 * hash) + getDestination().hashCode();
            }
            switch (destinationServicePortCase_) {
                case 6:
                    hash = (37 * hash) + DESTINATION_PORT_FIELD_NUMBER;
                    hash = (53 * hash) + getDestinationPort();
                    break;
                case 7:
                    hash = (37 * hash) + DESTINATION_PORT_NAME_FIELD_NUMBER;
                    hash = (53 * hash) + getDestinationPortName().hashCode();
                    break;
                case 0:
                default:
            }
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public static IngressRuleOuterClass.IngressRule parseFrom(
                java.nio.ByteBuffer data)
                throws InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static IngressRuleOuterClass.IngressRule parseFrom(
                java.nio.ByteBuffer data,
                ExtensionRegistryLite extensionRegistry)
                throws InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static IngressRuleOuterClass.IngressRule parseFrom(
                ByteString data)
                throws InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static IngressRuleOuterClass.IngressRule parseFrom(
                ByteString data,
                ExtensionRegistryLite extensionRegistry)
                throws InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static IngressRuleOuterClass.IngressRule parseFrom(byte[] data)
                throws InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static IngressRuleOuterClass.IngressRule parseFrom(
                byte[] data,
                ExtensionRegistryLite extensionRegistry)
                throws InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static IngressRuleOuterClass.IngressRule parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static IngressRuleOuterClass.IngressRule parseFrom(
                java.io.InputStream input,
                ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static IngressRuleOuterClass.IngressRule parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input);
        }

        public static IngressRuleOuterClass.IngressRule parseDelimitedFrom(
                java.io.InputStream input,
                ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static IngressRuleOuterClass.IngressRule parseFrom(
                CodedInputStream input)
                throws java.io.IOException {
            return GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static IngressRuleOuterClass.IngressRule parseFrom(
                CodedInputStream input,
                ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(IngressRuleOuterClass.IngressRule prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                    ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * <pre>
         * Ingress rules are routing rules applied to the ingress proxy pool. The
         * ingress proxes serve as the receiving edge proxy for the entire mesh, but
         * can also be addressed from inside the mesh.  Each ingress rule defines a
         * destination service and port. Rules that do not resolve to a service or a
         * port in the mesh should be ignored.
         * The routing rules for the destination service are applied at the ingress
         * proxy. That means the routing rule match conditions are composed and its
         * actions are enforced. The traffic splitting for the destination service is
         * also effective.
         * WARNING: This API is experimental and under active development
         * </pre>
         * <p>
         * Protobuf type {@code IngressRule}
         */
        public static final class Builder extends
                GeneratedMessageV3.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:IngressRule)
                IngressRuleOuterClass.IngressRuleOrBuilder {
            public static final Descriptors.Descriptor
            getDescriptor() {
                return IngressRuleOuterClass.internal_static_istio_proxy_v1_config_IngressRule_descriptor;
            }

            protected GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return IngressRuleOuterClass.internal_static_istio_proxy_v1_config_IngressRule_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                IngressRuleOuterClass.IngressRule.class, IngressRuleOuterClass.IngressRule.Builder.class);
            }

            // Construct using IngressRuleOuterClass.IngressRule.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    GeneratedMessageV3.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (GeneratedMessageV3
                        .alwaysUseFieldBuilders) {
                }
            }

            public Builder clear() {
                super.clear();
                port_ = 0;

                tlsSecret_ = "";

                precedence_ = 0;

                if (matchBuilder_ == null) {
                    match_ = null;
                } else {
                    match_ = null;
                    matchBuilder_ = null;
                }
                if (destinationBuilder_ == null) {
                    destination_ = null;
                } else {
                    destination_ = null;
                    destinationBuilder_ = null;
                }
                destinationServicePortCase_ = 0;
                destinationServicePort_ = null;
                return this;
            }

            public Descriptors.Descriptor
            getDescriptorForType() {
                return IngressRuleOuterClass.internal_static_istio_proxy_v1_config_IngressRule_descriptor;
            }

            public IngressRuleOuterClass.IngressRule getDefaultInstanceForType() {
                return IngressRuleOuterClass.IngressRule.getDefaultInstance();
            }

            public IngressRuleOuterClass.IngressRule build() {
                IngressRuleOuterClass.IngressRule result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public IngressRuleOuterClass.IngressRule buildPartial() {
                IngressRuleOuterClass.IngressRule result = new IngressRuleOuterClass.IngressRule(this);
                result.port_ = port_;
                result.tlsSecret_ = tlsSecret_;
                result.precedence_ = precedence_;
                if (matchBuilder_ == null) {
                    result.match_ = match_;
                } else {
                    result.match_ = matchBuilder_.build();
                }
                if (destinationBuilder_ == null) {
                    result.destination_ = destination_;
                } else {
                    result.destination_ = destinationBuilder_.build();
                }
                if (destinationServicePortCase_ == 6) {
                    result.destinationServicePort_ = destinationServicePort_;
                }
                if (destinationServicePortCase_ == 7) {
                    result.destinationServicePort_ = destinationServicePort_;
                }
                result.destinationServicePortCase_ = destinationServicePortCase_;
                onBuilt();
                return result;
            }

            public Builder clone() {
                return (Builder) super.clone();
            }

            public Builder setField(
                    Descriptors.FieldDescriptor field,
                    java.lang.Object value) {
                return (Builder) super.setField(field, value);
            }

            public Builder clearField(
                    Descriptors.FieldDescriptor field) {
                return (Builder) super.clearField(field);
            }

            public Builder clearOneof(
                    Descriptors.OneofDescriptor oneof) {
                return (Builder) super.clearOneof(oneof);
            }

            public Builder setRepeatedField(
                    Descriptors.FieldDescriptor field,
                    int index, java.lang.Object value) {
                return (Builder) super.setRepeatedField(field, index, value);
            }

            public Builder addRepeatedField(
                    Descriptors.FieldDescriptor field,
                    java.lang.Object value) {
                return (Builder) super.addRepeatedField(field, value);
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof IngressRuleOuterClass.IngressRule) {
                    return mergeFrom((IngressRuleOuterClass.IngressRule) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(IngressRuleOuterClass.IngressRule other) {
                if (other == IngressRuleOuterClass.IngressRule.getDefaultInstance()) return this;
                if (other.getPort() != 0) {
                    setPort(other.getPort());
                }
                if (!other.getTlsSecret().isEmpty()) {
                    tlsSecret_ = other.tlsSecret_;
                    onChanged();
                }
                if (other.getPrecedence() != 0) {
                    setPrecedence(other.getPrecedence());
                }
                if (other.hasMatch()) {
                    mergeMatch(other.getMatch());
                }
                if (other.hasDestination()) {
                    mergeDestination(other.getDestination());
                }
                switch (other.getDestinationServicePortCase()) {
                    case DESTINATION_PORT: {
                        setDestinationPort(other.getDestinationPort());
                        break;
                    }
                    case DESTINATION_PORT_NAME: {
                        destinationServicePortCase_ = 7;
                        destinationServicePort_ = other.destinationServicePort_;
                        onChanged();
                        break;
                    }
                    case DESTINATIONSERVICEPORT_NOT_SET: {
                        break;
                    }
                }
                this.mergeUnknownFields(other.unknownFields);
                onChanged();
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    CodedInputStream input,
                    ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                IngressRuleOuterClass.IngressRule parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (IngressRuleOuterClass.IngressRule) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private int destinationServicePortCase_ = 0;
            private java.lang.Object destinationServicePort_;

            public DestinationServicePortCase
            getDestinationServicePortCase() {
                return DestinationServicePortCase.forNumber(
                        destinationServicePortCase_);
            }

            public Builder clearDestinationServicePort() {
                destinationServicePortCase_ = 0;
                destinationServicePort_ = null;
                onChanged();
                return this;
            }


            private int port_;

            /**
             * <pre>
             * REQUIRED: Port on which the ingress proxy listens and applies the rule.
             * </pre>
             * <p>
             * <code>int32 port = 1;</code>
             */
            public int getPort() {
                return port_;
            }

            /**
             * <pre>
             * REQUIRED: Port on which the ingress proxy listens and applies the rule.
             * </pre>
             * <p>
             * <code>int32 port = 1;</code>
             */
            public Builder setPort(int value) {

                port_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * REQUIRED: Port on which the ingress proxy listens and applies the rule.
             * </pre>
             * <p>
             * <code>int32 port = 1;</code>
             */
            public Builder clearPort() {

                port_ = 0;
                onChanged();
                return this;
            }

            private java.lang.Object tlsSecret_ = "";

            /**
             * <pre>
             * Optional TLS secret path to apply server-side TLS context on the port.
             * It is up to the underlying secret store to interpret the path to the secret.
             * </pre>
             * <p>
             * <code>string tls_secret = 2;</code>
             */
            public java.lang.String getTlsSecret() {
                java.lang.Object ref = tlsSecret_;
                if (!(ref instanceof java.lang.String)) {
                    ByteString bs =
                            (ByteString) ref;
                    java.lang.String s = bs.toStringUtf8();
                    tlsSecret_ = s;
                    return s;
                } else {
                    return (java.lang.String) ref;
                }
            }

            /**
             * <pre>
             * Optional TLS secret path to apply server-side TLS context on the port.
             * It is up to the underlying secret store to interpret the path to the secret.
             * </pre>
             * <p>
             * <code>string tls_secret = 2;</code>
             */
            public ByteString
            getTlsSecretBytes() {
                java.lang.Object ref = tlsSecret_;
                if (ref instanceof String) {
                    ByteString b =
                            ByteString.copyFromUtf8(
                                    (java.lang.String) ref);
                    tlsSecret_ = b;
                    return b;
                } else {
                    return (ByteString) ref;
                }
            }

            /**
             * <pre>
             * Optional TLS secret path to apply server-side TLS context on the port.
             * It is up to the underlying secret store to interpret the path to the secret.
             * </pre>
             * <p>
             * <code>string tls_secret = 2;</code>
             */
            public Builder setTlsSecret(
                    java.lang.String value) {
                if (value == null) {
                    throw new NullPointerException();
                }

                tlsSecret_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * Optional TLS secret path to apply server-side TLS context on the port.
             * It is up to the underlying secret store to interpret the path to the secret.
             * </pre>
             * <p>
             * <code>string tls_secret = 2;</code>
             */
            public Builder clearTlsSecret() {

                tlsSecret_ = getDefaultInstance().getTlsSecret();
                onChanged();
                return this;
            }

            /**
             * <pre>
             * Optional TLS secret path to apply server-side TLS context on the port.
             * It is up to the underlying secret store to interpret the path to the secret.
             * </pre>
             * <p>
             * <code>string tls_secret = 2;</code>
             */
            public Builder setTlsSecretBytes(
                    ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                checkByteStringIsUtf8(value);

                tlsSecret_ = value;
                onChanged();
                return this;
            }

            private int precedence_;

            /**
             * <pre>
             * RECOMMENDED. Precedence is used to disambiguate the order of application
             * of rules. A higher number takes priority. If not specified, the value is
             * assumed to be 0.  The order of application for rules with the same
             * precedence is unspecified.
             * </pre>
             * <p>
             * <code>int32 precedence = 3;</code>
             */
            public int getPrecedence() {
                return precedence_;
            }

            /**
             * <pre>
             * RECOMMENDED. Precedence is used to disambiguate the order of application
             * of rules. A higher number takes priority. If not specified, the value is
             * assumed to be 0.  The order of application for rules with the same
             * precedence is unspecified.
             * </pre>
             * <p>
             * <code>int32 precedence = 3;</code>
             */
            public Builder setPrecedence(int value) {

                precedence_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * RECOMMENDED. Precedence is used to disambiguate the order of application
             * of rules. A higher number takes priority. If not specified, the value is
             * assumed to be 0.  The order of application for rules with the same
             * precedence is unspecified.
             * </pre>
             * <p>
             * <code>int32 precedence = 3;</code>
             */
            public Builder clearPrecedence() {

                precedence_ = 0;
                onChanged();
                return this;
            }

            private RouteRuleOuterClass.MatchCondition match_ = null;
            private SingleFieldBuilderV3<
                    RouteRuleOuterClass.MatchCondition, RouteRuleOuterClass.MatchCondition.Builder, RouteRuleOuterClass.MatchConditionOrBuilder> matchBuilder_;

            /**
             * <pre>
             * Match conditions to be satisfied for the ingress rule to be
             * activated.
             * </pre>
             * <p>
             * <code>.MatchCondition match = 4;</code>
             */
            public boolean hasMatch() {
                return matchBuilder_ != null || match_ != null;
            }

            /**
             * <pre>
             * Match conditions to be satisfied for the ingress rule to be
             * activated.
             * </pre>
             * <p>
             * <code>.MatchCondition match = 4;</code>
             */
            public RouteRuleOuterClass.MatchCondition getMatch() {
                if (matchBuilder_ == null) {
                    return match_ == null ? RouteRuleOuterClass.MatchCondition.getDefaultInstance() : match_;
                } else {
                    return matchBuilder_.getMessage();
                }
            }

            /**
             * <pre>
             * Match conditions to be satisfied for the ingress rule to be
             * activated.
             * </pre>
             * <p>
             * <code>.MatchCondition match = 4;</code>
             */
            public Builder setMatch(RouteRuleOuterClass.MatchCondition value) {
                if (matchBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    match_ = value;
                    onChanged();
                } else {
                    matchBuilder_.setMessage(value);
                }

                return this;
            }

            /**
             * <pre>
             * Match conditions to be satisfied for the ingress rule to be
             * activated.
             * </pre>
             * <p>
             * <code>.MatchCondition match = 4;</code>
             */
            public Builder setMatch(
                    RouteRuleOuterClass.MatchCondition.Builder builderForValue) {
                if (matchBuilder_ == null) {
                    match_ = builderForValue.build();
                    onChanged();
                } else {
                    matchBuilder_.setMessage(builderForValue.build());
                }

                return this;
            }

            /**
             * <pre>
             * Match conditions to be satisfied for the ingress rule to be
             * activated.
             * </pre>
             * <p>
             * <code>.MatchCondition match = 4;</code>
             */
            public Builder mergeMatch(RouteRuleOuterClass.MatchCondition value) {
                if (matchBuilder_ == null) {
                    if (match_ != null) {
                        match_ =
                                RouteRuleOuterClass.MatchCondition.newBuilder(match_).mergeFrom(value).buildPartial();
                    } else {
                        match_ = value;
                    }
                    onChanged();
                } else {
                    matchBuilder_.mergeFrom(value);
                }

                return this;
            }

            /**
             * <pre>
             * Match conditions to be satisfied for the ingress rule to be
             * activated.
             * </pre>
             * <p>
             * <code>.MatchCondition match = 4;</code>
             */
            public Builder clearMatch() {
                if (matchBuilder_ == null) {
                    match_ = null;
                    onChanged();
                } else {
                    match_ = null;
                    matchBuilder_ = null;
                }

                return this;
            }

            /**
             * <pre>
             * Match conditions to be satisfied for the ingress rule to be
             * activated.
             * </pre>
             * <p>
             * <code>.MatchCondition match = 4;</code>
             */
            public RouteRuleOuterClass.MatchCondition.Builder getMatchBuilder() {

                onChanged();
                return getMatchFieldBuilder().getBuilder();
            }

            /**
             * <pre>
             * Match conditions to be satisfied for the ingress rule to be
             * activated.
             * </pre>
             * <p>
             * <code>.MatchCondition match = 4;</code>
             */
            public RouteRuleOuterClass.MatchConditionOrBuilder getMatchOrBuilder() {
                if (matchBuilder_ != null) {
                    return matchBuilder_.getMessageOrBuilder();
                } else {
                    return match_ == null ?
                            RouteRuleOuterClass.MatchCondition.getDefaultInstance() : match_;
                }
            }

            /**
             * <pre>
             * Match conditions to be satisfied for the ingress rule to be
             * activated.
             * </pre>
             * <p>
             * <code>.MatchCondition match = 4;</code>
             */
            private SingleFieldBuilderV3<
                    RouteRuleOuterClass.MatchCondition, RouteRuleOuterClass.MatchCondition.Builder, RouteRuleOuterClass.MatchConditionOrBuilder>
            getMatchFieldBuilder() {
                if (matchBuilder_ == null) {
                    matchBuilder_ = new SingleFieldBuilderV3<
                            RouteRuleOuterClass.MatchCondition, RouteRuleOuterClass.MatchCondition.Builder, RouteRuleOuterClass.MatchConditionOrBuilder>(
                            getMatch(),
                            getParentForChildren(),
                            isClean());
                    match_ = null;
                }
                return matchBuilder_;
            }

            private RouteRuleOuterClass.IstioService destination_ = null;
            private SingleFieldBuilderV3<
                    RouteRuleOuterClass.IstioService, RouteRuleOuterClass.IstioService.Builder, RouteRuleOuterClass.IstioServiceOrBuilder> destinationBuilder_;

            /**
             * <pre>
             * REQUIRED: Destination uniquely identifies the destination service.
             * *Note:* The ingress rule destination specification represents all version
             * of the service and therefore the IstioService's labels field MUST be empty.
             * </pre>
             * <p>
             * <code>.IstioService destination = 5;</code>
             */
            public boolean hasDestination() {
                return destinationBuilder_ != null || destination_ != null;
            }

            /**
             * <pre>
             * REQUIRED: Destination uniquely identifies the destination service.
             * *Note:* The ingress rule destination specification represents all version
             * of the service and therefore the IstioService's labels field MUST be empty.
             * </pre>
             * <p>
             * <code>.IstioService destination = 5;</code>
             */
            public RouteRuleOuterClass.IstioService getDestination() {
                if (destinationBuilder_ == null) {
                    return destination_ == null ? RouteRuleOuterClass.IstioService.getDefaultInstance() : destination_;
                } else {
                    return destinationBuilder_.getMessage();
                }
            }

            /**
             * <pre>
             * REQUIRED: Destination uniquely identifies the destination service.
             * *Note:* The ingress rule destination specification represents all version
             * of the service and therefore the IstioService's labels field MUST be empty.
             * </pre>
             * <p>
             * <code>.IstioService destination = 5;</code>
             */
            public Builder setDestination(RouteRuleOuterClass.IstioService value) {
                if (destinationBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    destination_ = value;
                    onChanged();
                } else {
                    destinationBuilder_.setMessage(value);
                }

                return this;
            }

            /**
             * <pre>
             * REQUIRED: Destination uniquely identifies the destination service.
             * *Note:* The ingress rule destination specification represents all version
             * of the service and therefore the IstioService's labels field MUST be empty.
             * </pre>
             * <p>
             * <code>.IstioService destination = 5;</code>
             */
            public Builder setDestination(
                    RouteRuleOuterClass.IstioService.Builder builderForValue) {
                if (destinationBuilder_ == null) {
                    destination_ = builderForValue.build();
                    onChanged();
                } else {
                    destinationBuilder_.setMessage(builderForValue.build());
                }

                return this;
            }

            /**
             * <pre>
             * REQUIRED: Destination uniquely identifies the destination service.
             * *Note:* The ingress rule destination specification represents all version
             * of the service and therefore the IstioService's labels field MUST be empty.
             * </pre>
             * <p>
             * <code>.IstioService destination = 5;</code>
             */
            public Builder mergeDestination(RouteRuleOuterClass.IstioService value) {
                if (destinationBuilder_ == null) {
                    if (destination_ != null) {
                        destination_ =
                                RouteRuleOuterClass.IstioService.newBuilder(destination_).mergeFrom(value).buildPartial();
                    } else {
                        destination_ = value;
                    }
                    onChanged();
                } else {
                    destinationBuilder_.mergeFrom(value);
                }

                return this;
            }

            /**
             * <pre>
             * REQUIRED: Destination uniquely identifies the destination service.
             * *Note:* The ingress rule destination specification represents all version
             * of the service and therefore the IstioService's labels field MUST be empty.
             * </pre>
             * <p>
             * <code>.IstioService destination = 5;</code>
             */
            public Builder clearDestination() {
                if (destinationBuilder_ == null) {
                    destination_ = null;
                    onChanged();
                } else {
                    destination_ = null;
                    destinationBuilder_ = null;
                }

                return this;
            }

            /**
             * <pre>
             * REQUIRED: Destination uniquely identifies the destination service.
             * *Note:* The ingress rule destination specification represents all version
             * of the service and therefore the IstioService's labels field MUST be empty.
             * </pre>
             * <p>
             * <code>.IstioService destination = 5;</code>
             */
            public RouteRuleOuterClass.IstioService.Builder getDestinationBuilder() {

                onChanged();
                return getDestinationFieldBuilder().getBuilder();
            }

            /**
             * <pre>
             * REQUIRED: Destination uniquely identifies the destination service.
             * *Note:* The ingress rule destination specification represents all version
             * of the service and therefore the IstioService's labels field MUST be empty.
             * </pre>
             * <p>
             * <code>.IstioService destination = 5;</code>
             */
            public RouteRuleOuterClass.IstioServiceOrBuilder getDestinationOrBuilder() {
                if (destinationBuilder_ != null) {
                    return destinationBuilder_.getMessageOrBuilder();
                } else {
                    return destination_ == null ?
                            RouteRuleOuterClass.IstioService.getDefaultInstance() : destination_;
                }
            }

            /**
             * <pre>
             * REQUIRED: Destination uniquely identifies the destination service.
             * *Note:* The ingress rule destination specification represents all version
             * of the service and therefore the IstioService's labels field MUST be empty.
             * </pre>
             * <p>
             * <code>.IstioService destination = 5;</code>
             */
            private SingleFieldBuilderV3<
                    RouteRuleOuterClass.IstioService, RouteRuleOuterClass.IstioService.Builder, RouteRuleOuterClass.IstioServiceOrBuilder>
            getDestinationFieldBuilder() {
                if (destinationBuilder_ == null) {
                    destinationBuilder_ = new SingleFieldBuilderV3<
                            RouteRuleOuterClass.IstioService, RouteRuleOuterClass.IstioService.Builder, RouteRuleOuterClass.IstioServiceOrBuilder>(
                            getDestination(),
                            getParentForChildren(),
                            isClean());
                    destination_ = null;
                }
                return destinationBuilder_;
            }

            /**
             * <pre>
             * Identifies the destination service port by value
             * </pre>
             * <p>
             * <code>int32 destination_port = 6;</code>
             */
            public int getDestinationPort() {
                if (destinationServicePortCase_ == 6) {
                    return (java.lang.Integer) destinationServicePort_;
                }
                return 0;
            }

            /**
             * <pre>
             * Identifies the destination service port by value
             * </pre>
             * <p>
             * <code>int32 destination_port = 6;</code>
             */
            public Builder setDestinationPort(int value) {
                destinationServicePortCase_ = 6;
                destinationServicePort_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * Identifies the destination service port by value
             * </pre>
             * <p>
             * <code>int32 destination_port = 6;</code>
             */
            public Builder clearDestinationPort() {
                if (destinationServicePortCase_ == 6) {
                    destinationServicePortCase_ = 0;
                    destinationServicePort_ = null;
                    onChanged();
                }
                return this;
            }

            /**
             * <pre>
             * Identifies the destination service port by name
             * </pre>
             * <p>
             * <code>string destination_port_name = 7;</code>
             */
            public java.lang.String getDestinationPortName() {
                java.lang.Object ref = "";
                if (destinationServicePortCase_ == 7) {
                    ref = destinationServicePort_;
                }
                if (!(ref instanceof java.lang.String)) {
                    ByteString bs =
                            (ByteString) ref;
                    java.lang.String s = bs.toStringUtf8();
                    if (destinationServicePortCase_ == 7) {
                        destinationServicePort_ = s;
                    }
                    return s;
                } else {
                    return (java.lang.String) ref;
                }
            }

            /**
             * <pre>
             * Identifies the destination service port by name
             * </pre>
             * <p>
             * <code>string destination_port_name = 7;</code>
             */
            public ByteString
            getDestinationPortNameBytes() {
                java.lang.Object ref = "";
                if (destinationServicePortCase_ == 7) {
                    ref = destinationServicePort_;
                }
                if (ref instanceof String) {
                    ByteString b =
                            ByteString.copyFromUtf8(
                                    (java.lang.String) ref);
                    if (destinationServicePortCase_ == 7) {
                        destinationServicePort_ = b;
                    }
                    return b;
                } else {
                    return (ByteString) ref;
                }
            }

            /**
             * <pre>
             * Identifies the destination service port by name
             * </pre>
             * <p>
             * <code>string destination_port_name = 7;</code>
             */
            public Builder setDestinationPortName(
                    java.lang.String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                destinationServicePortCase_ = 7;
                destinationServicePort_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * Identifies the destination service port by name
             * </pre>
             * <p>
             * <code>string destination_port_name = 7;</code>
             */
            public Builder clearDestinationPortName() {
                if (destinationServicePortCase_ == 7) {
                    destinationServicePortCase_ = 0;
                    destinationServicePort_ = null;
                    onChanged();
                }
                return this;
            }

            /**
             * <pre>
             * Identifies the destination service port by name
             * </pre>
             * <p>
             * <code>string destination_port_name = 7;</code>
             */
            public Builder setDestinationPortNameBytes(
                    ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                checkByteStringIsUtf8(value);
                destinationServicePortCase_ = 7;
                destinationServicePort_ = value;
                onChanged();
                return this;
            }

            public final Builder setUnknownFields(
                    final UnknownFieldSet unknownFields) {
                return super.setUnknownFieldsProto3(unknownFields);
            }

            public final Builder mergeUnknownFields(
                    final UnknownFieldSet unknownFields) {
                return super.mergeUnknownFields(unknownFields);
            }


            // @@protoc_insertion_point(builder_scope:IngressRule)
        }

        // @@protoc_insertion_point(class_scope:IngressRule)
        private static final IngressRuleOuterClass.IngressRule DEFAULT_INSTANCE;

        static {
            DEFAULT_INSTANCE = new IngressRuleOuterClass.IngressRule();
        }

        public static IngressRuleOuterClass.IngressRule getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        private static final Parser<IngressRule>
                PARSER = new AbstractParser<IngressRule>() {
            public IngressRule parsePartialFrom(
                    CodedInputStream input,
                    ExtensionRegistryLite extensionRegistry)
                    throws InvalidProtocolBufferException {
                return new IngressRule(input, extensionRegistry);
            }
        };

        public static Parser<IngressRule> parser() {
            return PARSER;
        }

        @java.lang.Override
        public Parser<IngressRule> getParserForType() {
            return PARSER;
        }

        public IngressRuleOuterClass.IngressRule getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

    }

    private static final Descriptors.Descriptor
            internal_static_istio_proxy_v1_config_IngressRule_descriptor;
    private static final
    GeneratedMessageV3.FieldAccessorTable
            internal_static_istio_proxy_v1_config_IngressRule_fieldAccessorTable;

    public static Descriptors.FileDescriptor
    getDescriptor() {
        return descriptor;
    }

    private static Descriptors.FileDescriptor
            descriptor;

    static {
        java.lang.String[] descriptorData = {
                "\n\"proxy/v1/config/ingress_rule.proto\022\025is" +
                        "tio.proxy.v1.config\032 proxy/v1/config/rou" +
                        "te_rule.proto\"\214\002\n\013IngressRule\022\014\n\004port\030\001 " +
                        "\001(\005\022\022\n\ntls_secret\030\002 \001(\t\022\022\n\nprecedence\030\003 " +
                        "\001(\005\0224\n\005match\030\004 \001(\0132%.istio.proxy.v1.conf" +
                        "ig.MatchCondition\0228\n\013destination\030\005 \001(\0132#" +
                        ".IstioService\022\032\n\020d" +
                        "estination_port\030\006 \001(\005H\000\022\037\n\025destination_p" +
                        "ort_name\030\007 \001(\tH\000B\032\n\030destination_service_" +
                        "portb\006proto3"
        };
        Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
                new Descriptors.FileDescriptor.InternalDescriptorAssigner() {
                    public ExtensionRegistry assignDescriptors(
                            Descriptors.FileDescriptor root) {
                        descriptor = root;
                        return null;
                    }
                };
        Descriptors.FileDescriptor
                .internalBuildGeneratedFileFrom(descriptorData,
                        new Descriptors.FileDescriptor[]{
                                RouteRuleOuterClass.getDescriptor(),
                        }, assigner);
        internal_static_istio_proxy_v1_config_IngressRule_descriptor =
                getDescriptor().getMessageTypes().get(0);
        internal_static_istio_proxy_v1_config_IngressRule_fieldAccessorTable = new
                GeneratedMessageV3.FieldAccessorTable(
                internal_static_istio_proxy_v1_config_IngressRule_descriptor,
                new java.lang.String[]{"Port", "TlsSecret", "Precedence", "Match", "Destination", "DestinationPort", "DestinationPortName", "DestinationServicePort",});
        RouteRuleOuterClass.getDescriptor();
    }

    // @@protoc_insertion_point(outer_class_scope)
}
