// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proxy/v1/config/l4_fault.proto

package istio.proxy.v1.config;

public final class L4Fault {
  private L4Fault() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface L4FaultInjectionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:istio.proxy.v1.config.L4FaultInjection)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Unlike Http services, we have very little context for raw Tcp|Udp
     * connections. We could throttle bandwidth of the connections (slow down
     * the connection) and/or abruptly reset (terminate) the Tcp connection
     * after it has been established.
     * We first throttle (if set) and then terminate the connection.
     * </pre>
     *
     * <code>.istio.proxy.v1.config.L4FaultInjection.Throttle throttle = 1;</code>
     */
    boolean hasThrottle();
    /**
     * <pre>
     * Unlike Http services, we have very little context for raw Tcp|Udp
     * connections. We could throttle bandwidth of the connections (slow down
     * the connection) and/or abruptly reset (terminate) the Tcp connection
     * after it has been established.
     * We first throttle (if set) and then terminate the connection.
     * </pre>
     *
     * <code>.istio.proxy.v1.config.L4FaultInjection.Throttle throttle = 1;</code>
     */
    istio.proxy.v1.config.L4Fault.L4FaultInjection.Throttle getThrottle();
    /**
     * <pre>
     * Unlike Http services, we have very little context for raw Tcp|Udp
     * connections. We could throttle bandwidth of the connections (slow down
     * the connection) and/or abruptly reset (terminate) the Tcp connection
     * after it has been established.
     * We first throttle (if set) and then terminate the connection.
     * </pre>
     *
     * <code>.istio.proxy.v1.config.L4FaultInjection.Throttle throttle = 1;</code>
     */
    istio.proxy.v1.config.L4Fault.L4FaultInjection.ThrottleOrBuilder getThrottleOrBuilder();

    /**
     * <code>.istio.proxy.v1.config.L4FaultInjection.Terminate terminate = 2;</code>
     */
    boolean hasTerminate();
    /**
     * <code>.istio.proxy.v1.config.L4FaultInjection.Terminate terminate = 2;</code>
     */
    istio.proxy.v1.config.L4Fault.L4FaultInjection.Terminate getTerminate();
    /**
     * <code>.istio.proxy.v1.config.L4FaultInjection.Terminate terminate = 2;</code>
     */
    istio.proxy.v1.config.L4Fault.L4FaultInjection.TerminateOrBuilder getTerminateOrBuilder();
  }
  /**
   * <pre>
   * (-- Faults can be injected into the connections from downstream by the
   * Envoy, for testing the failure recovery capabilities of downstream
   * services.  Faults include aborting the connection from downstream
   * service, delaying proxying of connection to the destination
   * service, and throttling the bandwidth of the connection (either
   * end). Bandwidth throttling for failure testing should not be confused
   * with the rate limiting policy enforcement provided by the Mixer
   * component. L4 fault injection is not supported at the moment. --)
   * </pre>
   *
   * Protobuf type {@code istio.proxy.v1.config.L4FaultInjection}
   */
  public  static final class L4FaultInjection extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:istio.proxy.v1.config.L4FaultInjection)
      L4FaultInjectionOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use L4FaultInjection.newBuilder() to construct.
    private L4FaultInjection(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private L4FaultInjection() {
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private L4FaultInjection(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              istio.proxy.v1.config.L4Fault.L4FaultInjection.Throttle.Builder subBuilder = null;
              if (throttle_ != null) {
                subBuilder = throttle_.toBuilder();
              }
              throttle_ = input.readMessage(istio.proxy.v1.config.L4Fault.L4FaultInjection.Throttle.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(throttle_);
                throttle_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              istio.proxy.v1.config.L4Fault.L4FaultInjection.Terminate.Builder subBuilder = null;
              if (terminate_ != null) {
                subBuilder = terminate_.toBuilder();
              }
              terminate_ = input.readMessage(istio.proxy.v1.config.L4Fault.L4FaultInjection.Terminate.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(terminate_);
                terminate_ = subBuilder.buildPartial();
              }

              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return istio.proxy.v1.config.L4Fault.internal_static_istio_proxy_v1_config_L4FaultInjection_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return istio.proxy.v1.config.L4Fault.internal_static_istio_proxy_v1_config_L4FaultInjection_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              istio.proxy.v1.config.L4Fault.L4FaultInjection.class, istio.proxy.v1.config.L4Fault.L4FaultInjection.Builder.class);
    }

    public interface ThrottleOrBuilder extends
        // @@protoc_insertion_point(interface_extends:istio.proxy.v1.config.L4FaultInjection.Throttle)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * percentage of connections to throttle.
       * </pre>
       *
       * <code>float percent = 1;</code>
       */
      float getPercent();

      /**
       * <pre>
       * bandwidth limit in "bits" per second between downstream and Envoy
       * </pre>
       *
       * <code>int64 downstream_limit_bps = 2;</code>
       */
      long getDownstreamLimitBps();

      /**
       * <pre>
       * bandwidth limits in "bits" per second between Envoy and upstream
       * </pre>
       *
       * <code>int64 upstream_limit_bps = 3;</code>
       */
      long getUpstreamLimitBps();

      /**
       * <pre>
       * Wait a while after the connection is established, before
       * starting bandwidth throttling. This would allow us to inject fault
       * after the application protocol (e.g., MySQL) has had time to
       * establish sessions/whatever handshake necessary.
       * </pre>
       *
       * <code>.google.protobuf.Duration throttle_after_period = 4;</code>
       */
      boolean hasThrottleAfterPeriod();
      /**
       * <pre>
       * Wait a while after the connection is established, before
       * starting bandwidth throttling. This would allow us to inject fault
       * after the application protocol (e.g., MySQL) has had time to
       * establish sessions/whatever handshake necessary.
       * </pre>
       *
       * <code>.google.protobuf.Duration throttle_after_period = 4;</code>
       */
      com.google.protobuf.Duration getThrottleAfterPeriod();
      /**
       * <pre>
       * Wait a while after the connection is established, before
       * starting bandwidth throttling. This would allow us to inject fault
       * after the application protocol (e.g., MySQL) has had time to
       * establish sessions/whatever handshake necessary.
       * </pre>
       *
       * <code>.google.protobuf.Duration throttle_after_period = 4;</code>
       */
      com.google.protobuf.DurationOrBuilder getThrottleAfterPeriodOrBuilder();

      /**
       * <pre>
       * Alternatively, we could wait for a certain number of bytes to be
       * transferred to upstream before throttling the bandwidth.
       * </pre>
       *
       * <code>double throttle_after_bytes = 5;</code>
       */
      double getThrottleAfterBytes();

      /**
       * <pre>
       * Stop throttling after the given duration. If not set, the connection
       * will be throttled for its lifetime.
       * </pre>
       *
       * <code>.google.protobuf.Duration throttle_for_period = 6;</code>
       */
      boolean hasThrottleForPeriod();
      /**
       * <pre>
       * Stop throttling after the given duration. If not set, the connection
       * will be throttled for its lifetime.
       * </pre>
       *
       * <code>.google.protobuf.Duration throttle_for_period = 6;</code>
       */
      com.google.protobuf.Duration getThrottleForPeriod();
      /**
       * <pre>
       * Stop throttling after the given duration. If not set, the connection
       * will be throttled for its lifetime.
       * </pre>
       *
       * <code>.google.protobuf.Duration throttle_for_period = 6;</code>
       */
      com.google.protobuf.DurationOrBuilder getThrottleForPeriodOrBuilder();

      public istio.proxy.v1.config.L4Fault.L4FaultInjection.Throttle.ThrottleAfterCase getThrottleAfterCase();
    }
    /**
     * <pre>
     * Bandwidth throttling for Tcp and Udp connections
     * </pre>
     *
     * Protobuf type {@code istio.proxy.v1.config.L4FaultInjection.Throttle}
     */
    public  static final class Throttle extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:istio.proxy.v1.config.L4FaultInjection.Throttle)
        ThrottleOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use Throttle.newBuilder() to construct.
      private Throttle(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private Throttle() {
        percent_ = 0F;
        downstreamLimitBps_ = 0L;
        upstreamLimitBps_ = 0L;
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private Throttle(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownFieldProto3(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 13: {

                percent_ = input.readFloat();
                break;
              }
              case 16: {

                downstreamLimitBps_ = input.readInt64();
                break;
              }
              case 24: {

                upstreamLimitBps_ = input.readInt64();
                break;
              }
              case 34: {
                com.google.protobuf.Duration.Builder subBuilder = null;
                if (throttleAfterCase_ == 4) {
                  subBuilder = ((com.google.protobuf.Duration) throttleAfter_).toBuilder();
                }
                throttleAfter_ =
                    input.readMessage(com.google.protobuf.Duration.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom((com.google.protobuf.Duration) throttleAfter_);
                  throttleAfter_ = subBuilder.buildPartial();
                }
                throttleAfterCase_ = 4;
                break;
              }
              case 41: {
                throttleAfterCase_ = 5;
                throttleAfter_ = input.readDouble();
                break;
              }
              case 50: {
                com.google.protobuf.Duration.Builder subBuilder = null;
                if (throttleForPeriod_ != null) {
                  subBuilder = throttleForPeriod_.toBuilder();
                }
                throttleForPeriod_ = input.readMessage(com.google.protobuf.Duration.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(throttleForPeriod_);
                  throttleForPeriod_ = subBuilder.buildPartial();
                }

                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return istio.proxy.v1.config.L4Fault.internal_static_istio_proxy_v1_config_L4FaultInjection_Throttle_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return istio.proxy.v1.config.L4Fault.internal_static_istio_proxy_v1_config_L4FaultInjection_Throttle_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                istio.proxy.v1.config.L4Fault.L4FaultInjection.Throttle.class, istio.proxy.v1.config.L4Fault.L4FaultInjection.Throttle.Builder.class);
      }

      private int throttleAfterCase_ = 0;
      private java.lang.Object throttleAfter_;
      public enum ThrottleAfterCase
          implements com.google.protobuf.Internal.EnumLite {
        THROTTLE_AFTER_PERIOD(4),
        THROTTLE_AFTER_BYTES(5),
        THROTTLEAFTER_NOT_SET(0);
        private final int value;
        private ThrottleAfterCase(int value) {
          this.value = value;
        }
        /**
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @java.lang.Deprecated
        public static ThrottleAfterCase valueOf(int value) {
          return forNumber(value);
        }

        public static ThrottleAfterCase forNumber(int value) {
          switch (value) {
            case 4: return THROTTLE_AFTER_PERIOD;
            case 5: return THROTTLE_AFTER_BYTES;
            case 0: return THROTTLEAFTER_NOT_SET;
            default: return null;
          }
        }
        public int getNumber() {
          return this.value;
        }
      };

      public ThrottleAfterCase
      getThrottleAfterCase() {
        return ThrottleAfterCase.forNumber(
            throttleAfterCase_);
      }

      public static final int PERCENT_FIELD_NUMBER = 1;
      private float percent_;
      /**
       * <pre>
       * percentage of connections to throttle.
       * </pre>
       *
       * <code>float percent = 1;</code>
       */
      public float getPercent() {
        return percent_;
      }

      public static final int DOWNSTREAM_LIMIT_BPS_FIELD_NUMBER = 2;
      private long downstreamLimitBps_;
      /**
       * <pre>
       * bandwidth limit in "bits" per second between downstream and Envoy
       * </pre>
       *
       * <code>int64 downstream_limit_bps = 2;</code>
       */
      public long getDownstreamLimitBps() {
        return downstreamLimitBps_;
      }

      public static final int UPSTREAM_LIMIT_BPS_FIELD_NUMBER = 3;
      private long upstreamLimitBps_;
      /**
       * <pre>
       * bandwidth limits in "bits" per second between Envoy and upstream
       * </pre>
       *
       * <code>int64 upstream_limit_bps = 3;</code>
       */
      public long getUpstreamLimitBps() {
        return upstreamLimitBps_;
      }

      public static final int THROTTLE_AFTER_PERIOD_FIELD_NUMBER = 4;
      /**
       * <pre>
       * Wait a while after the connection is established, before
       * starting bandwidth throttling. This would allow us to inject fault
       * after the application protocol (e.g., MySQL) has had time to
       * establish sessions/whatever handshake necessary.
       * </pre>
       *
       * <code>.google.protobuf.Duration throttle_after_period = 4;</code>
       */
      public boolean hasThrottleAfterPeriod() {
        return throttleAfterCase_ == 4;
      }
      /**
       * <pre>
       * Wait a while after the connection is established, before
       * starting bandwidth throttling. This would allow us to inject fault
       * after the application protocol (e.g., MySQL) has had time to
       * establish sessions/whatever handshake necessary.
       * </pre>
       *
       * <code>.google.protobuf.Duration throttle_after_period = 4;</code>
       */
      public com.google.protobuf.Duration getThrottleAfterPeriod() {
        if (throttleAfterCase_ == 4) {
           return (com.google.protobuf.Duration) throttleAfter_;
        }
        return com.google.protobuf.Duration.getDefaultInstance();
      }
      /**
       * <pre>
       * Wait a while after the connection is established, before
       * starting bandwidth throttling. This would allow us to inject fault
       * after the application protocol (e.g., MySQL) has had time to
       * establish sessions/whatever handshake necessary.
       * </pre>
       *
       * <code>.google.protobuf.Duration throttle_after_period = 4;</code>
       */
      public com.google.protobuf.DurationOrBuilder getThrottleAfterPeriodOrBuilder() {
        if (throttleAfterCase_ == 4) {
           return (com.google.protobuf.Duration) throttleAfter_;
        }
        return com.google.protobuf.Duration.getDefaultInstance();
      }

      public static final int THROTTLE_AFTER_BYTES_FIELD_NUMBER = 5;
      /**
       * <pre>
       * Alternatively, we could wait for a certain number of bytes to be
       * transferred to upstream before throttling the bandwidth.
       * </pre>
       *
       * <code>double throttle_after_bytes = 5;</code>
       */
      public double getThrottleAfterBytes() {
        if (throttleAfterCase_ == 5) {
          return (java.lang.Double) throttleAfter_;
        }
        return 0D;
      }

      public static final int THROTTLE_FOR_PERIOD_FIELD_NUMBER = 6;
      private com.google.protobuf.Duration throttleForPeriod_;
      /**
       * <pre>
       * Stop throttling after the given duration. If not set, the connection
       * will be throttled for its lifetime.
       * </pre>
       *
       * <code>.google.protobuf.Duration throttle_for_period = 6;</code>
       */
      public boolean hasThrottleForPeriod() {
        return throttleForPeriod_ != null;
      }
      /**
       * <pre>
       * Stop throttling after the given duration. If not set, the connection
       * will be throttled for its lifetime.
       * </pre>
       *
       * <code>.google.protobuf.Duration throttle_for_period = 6;</code>
       */
      public com.google.protobuf.Duration getThrottleForPeriod() {
        return throttleForPeriod_ == null ? com.google.protobuf.Duration.getDefaultInstance() : throttleForPeriod_;
      }
      /**
       * <pre>
       * Stop throttling after the given duration. If not set, the connection
       * will be throttled for its lifetime.
       * </pre>
       *
       * <code>.google.protobuf.Duration throttle_for_period = 6;</code>
       */
      public com.google.protobuf.DurationOrBuilder getThrottleForPeriodOrBuilder() {
        return getThrottleForPeriod();
      }

      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (percent_ != 0F) {
          output.writeFloat(1, percent_);
        }
        if (downstreamLimitBps_ != 0L) {
          output.writeInt64(2, downstreamLimitBps_);
        }
        if (upstreamLimitBps_ != 0L) {
          output.writeInt64(3, upstreamLimitBps_);
        }
        if (throttleAfterCase_ == 4) {
          output.writeMessage(4, (com.google.protobuf.Duration) throttleAfter_);
        }
        if (throttleAfterCase_ == 5) {
          output.writeDouble(
              5, (double)((java.lang.Double) throttleAfter_));
        }
        if (throttleForPeriod_ != null) {
          output.writeMessage(6, getThrottleForPeriod());
        }
        unknownFields.writeTo(output);
      }

      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (percent_ != 0F) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(1, percent_);
        }
        if (downstreamLimitBps_ != 0L) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt64Size(2, downstreamLimitBps_);
        }
        if (upstreamLimitBps_ != 0L) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt64Size(3, upstreamLimitBps_);
        }
        if (throttleAfterCase_ == 4) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(4, (com.google.protobuf.Duration) throttleAfter_);
        }
        if (throttleAfterCase_ == 5) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(
                5, (double)((java.lang.Double) throttleAfter_));
        }
        if (throttleForPeriod_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(6, getThrottleForPeriod());
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof istio.proxy.v1.config.L4Fault.L4FaultInjection.Throttle)) {
          return super.equals(obj);
        }
        istio.proxy.v1.config.L4Fault.L4FaultInjection.Throttle other = (istio.proxy.v1.config.L4Fault.L4FaultInjection.Throttle) obj;

        boolean result = true;
        result = result && (
            java.lang.Float.floatToIntBits(getPercent())
            == java.lang.Float.floatToIntBits(
                other.getPercent()));
        result = result && (getDownstreamLimitBps()
            == other.getDownstreamLimitBps());
        result = result && (getUpstreamLimitBps()
            == other.getUpstreamLimitBps());
        result = result && (hasThrottleForPeriod() == other.hasThrottleForPeriod());
        if (hasThrottleForPeriod()) {
          result = result && getThrottleForPeriod()
              .equals(other.getThrottleForPeriod());
        }
        result = result && getThrottleAfterCase().equals(
            other.getThrottleAfterCase());
        if (!result) return false;
        switch (throttleAfterCase_) {
          case 4:
            result = result && getThrottleAfterPeriod()
                .equals(other.getThrottleAfterPeriod());
            break;
          case 5:
            result = result && (
                java.lang.Double.doubleToLongBits(getThrottleAfterBytes())
                == java.lang.Double.doubleToLongBits(
                    other.getThrottleAfterBytes()));
            break;
          case 0:
          default:
        }
        result = result && unknownFields.equals(other.unknownFields);
        return result;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + PERCENT_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getPercent());
        hash = (37 * hash) + DOWNSTREAM_LIMIT_BPS_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getDownstreamLimitBps());
        hash = (37 * hash) + UPSTREAM_LIMIT_BPS_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getUpstreamLimitBps());
        if (hasThrottleForPeriod()) {
          hash = (37 * hash) + THROTTLE_FOR_PERIOD_FIELD_NUMBER;
          hash = (53 * hash) + getThrottleForPeriod().hashCode();
        }
        switch (throttleAfterCase_) {
          case 4:
            hash = (37 * hash) + THROTTLE_AFTER_PERIOD_FIELD_NUMBER;
            hash = (53 * hash) + getThrottleAfterPeriod().hashCode();
            break;
          case 5:
            hash = (37 * hash) + THROTTLE_AFTER_BYTES_FIELD_NUMBER;
            hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
                java.lang.Double.doubleToLongBits(getThrottleAfterBytes()));
            break;
          case 0:
          default:
        }
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static istio.proxy.v1.config.L4Fault.L4FaultInjection.Throttle parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static istio.proxy.v1.config.L4Fault.L4FaultInjection.Throttle parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static istio.proxy.v1.config.L4Fault.L4FaultInjection.Throttle parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static istio.proxy.v1.config.L4Fault.L4FaultInjection.Throttle parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static istio.proxy.v1.config.L4Fault.L4FaultInjection.Throttle parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static istio.proxy.v1.config.L4Fault.L4FaultInjection.Throttle parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static istio.proxy.v1.config.L4Fault.L4FaultInjection.Throttle parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static istio.proxy.v1.config.L4Fault.L4FaultInjection.Throttle parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static istio.proxy.v1.config.L4Fault.L4FaultInjection.Throttle parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static istio.proxy.v1.config.L4Fault.L4FaultInjection.Throttle parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static istio.proxy.v1.config.L4Fault.L4FaultInjection.Throttle parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static istio.proxy.v1.config.L4Fault.L4FaultInjection.Throttle parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(istio.proxy.v1.config.L4Fault.L4FaultInjection.Throttle prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * Bandwidth throttling for Tcp and Udp connections
       * </pre>
       *
       * Protobuf type {@code istio.proxy.v1.config.L4FaultInjection.Throttle}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:istio.proxy.v1.config.L4FaultInjection.Throttle)
          istio.proxy.v1.config.L4Fault.L4FaultInjection.ThrottleOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return istio.proxy.v1.config.L4Fault.internal_static_istio_proxy_v1_config_L4FaultInjection_Throttle_descriptor;
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return istio.proxy.v1.config.L4Fault.internal_static_istio_proxy_v1_config_L4FaultInjection_Throttle_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  istio.proxy.v1.config.L4Fault.L4FaultInjection.Throttle.class, istio.proxy.v1.config.L4Fault.L4FaultInjection.Throttle.Builder.class);
        }

        // Construct using istio.proxy.v1.config.L4Fault.L4FaultInjection.Throttle.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        public Builder clear() {
          super.clear();
          percent_ = 0F;

          downstreamLimitBps_ = 0L;

          upstreamLimitBps_ = 0L;

          if (throttleForPeriodBuilder_ == null) {
            throttleForPeriod_ = null;
          } else {
            throttleForPeriod_ = null;
            throttleForPeriodBuilder_ = null;
          }
          throttleAfterCase_ = 0;
          throttleAfter_ = null;
          return this;
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return istio.proxy.v1.config.L4Fault.internal_static_istio_proxy_v1_config_L4FaultInjection_Throttle_descriptor;
        }

        public istio.proxy.v1.config.L4Fault.L4FaultInjection.Throttle getDefaultInstanceForType() {
          return istio.proxy.v1.config.L4Fault.L4FaultInjection.Throttle.getDefaultInstance();
        }

        public istio.proxy.v1.config.L4Fault.L4FaultInjection.Throttle build() {
          istio.proxy.v1.config.L4Fault.L4FaultInjection.Throttle result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public istio.proxy.v1.config.L4Fault.L4FaultInjection.Throttle buildPartial() {
          istio.proxy.v1.config.L4Fault.L4FaultInjection.Throttle result = new istio.proxy.v1.config.L4Fault.L4FaultInjection.Throttle(this);
          result.percent_ = percent_;
          result.downstreamLimitBps_ = downstreamLimitBps_;
          result.upstreamLimitBps_ = upstreamLimitBps_;
          if (throttleAfterCase_ == 4) {
            if (throttleAfterPeriodBuilder_ == null) {
              result.throttleAfter_ = throttleAfter_;
            } else {
              result.throttleAfter_ = throttleAfterPeriodBuilder_.build();
            }
          }
          if (throttleAfterCase_ == 5) {
            result.throttleAfter_ = throttleAfter_;
          }
          if (throttleForPeriodBuilder_ == null) {
            result.throttleForPeriod_ = throttleForPeriod_;
          } else {
            result.throttleForPeriod_ = throttleForPeriodBuilder_.build();
          }
          result.throttleAfterCase_ = throttleAfterCase_;
          onBuilt();
          return result;
        }

        public Builder clone() {
          return (Builder) super.clone();
        }
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return (Builder) super.setField(field, value);
        }
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return (Builder) super.clearField(field);
        }
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return (Builder) super.clearOneof(oneof);
        }
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return (Builder) super.setRepeatedField(field, index, value);
        }
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return (Builder) super.addRepeatedField(field, value);
        }
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof istio.proxy.v1.config.L4Fault.L4FaultInjection.Throttle) {
            return mergeFrom((istio.proxy.v1.config.L4Fault.L4FaultInjection.Throttle)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(istio.proxy.v1.config.L4Fault.L4FaultInjection.Throttle other) {
          if (other == istio.proxy.v1.config.L4Fault.L4FaultInjection.Throttle.getDefaultInstance()) return this;
          if (other.getPercent() != 0F) {
            setPercent(other.getPercent());
          }
          if (other.getDownstreamLimitBps() != 0L) {
            setDownstreamLimitBps(other.getDownstreamLimitBps());
          }
          if (other.getUpstreamLimitBps() != 0L) {
            setUpstreamLimitBps(other.getUpstreamLimitBps());
          }
          if (other.hasThrottleForPeriod()) {
            mergeThrottleForPeriod(other.getThrottleForPeriod());
          }
          switch (other.getThrottleAfterCase()) {
            case THROTTLE_AFTER_PERIOD: {
              mergeThrottleAfterPeriod(other.getThrottleAfterPeriod());
              break;
            }
            case THROTTLE_AFTER_BYTES: {
              setThrottleAfterBytes(other.getThrottleAfterBytes());
              break;
            }
            case THROTTLEAFTER_NOT_SET: {
              break;
            }
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          istio.proxy.v1.config.L4Fault.L4FaultInjection.Throttle parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (istio.proxy.v1.config.L4Fault.L4FaultInjection.Throttle) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int throttleAfterCase_ = 0;
        private java.lang.Object throttleAfter_;
        public ThrottleAfterCase
            getThrottleAfterCase() {
          return ThrottleAfterCase.forNumber(
              throttleAfterCase_);
        }

        public Builder clearThrottleAfter() {
          throttleAfterCase_ = 0;
          throttleAfter_ = null;
          onChanged();
          return this;
        }


        private float percent_ ;
        /**
         * <pre>
         * percentage of connections to throttle.
         * </pre>
         *
         * <code>float percent = 1;</code>
         */
        public float getPercent() {
          return percent_;
        }
        /**
         * <pre>
         * percentage of connections to throttle.
         * </pre>
         *
         * <code>float percent = 1;</code>
         */
        public Builder setPercent(float value) {
          
          percent_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * percentage of connections to throttle.
         * </pre>
         *
         * <code>float percent = 1;</code>
         */
        public Builder clearPercent() {
          
          percent_ = 0F;
          onChanged();
          return this;
        }

        private long downstreamLimitBps_ ;
        /**
         * <pre>
         * bandwidth limit in "bits" per second between downstream and Envoy
         * </pre>
         *
         * <code>int64 downstream_limit_bps = 2;</code>
         */
        public long getDownstreamLimitBps() {
          return downstreamLimitBps_;
        }
        /**
         * <pre>
         * bandwidth limit in "bits" per second between downstream and Envoy
         * </pre>
         *
         * <code>int64 downstream_limit_bps = 2;</code>
         */
        public Builder setDownstreamLimitBps(long value) {
          
          downstreamLimitBps_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * bandwidth limit in "bits" per second between downstream and Envoy
         * </pre>
         *
         * <code>int64 downstream_limit_bps = 2;</code>
         */
        public Builder clearDownstreamLimitBps() {
          
          downstreamLimitBps_ = 0L;
          onChanged();
          return this;
        }

        private long upstreamLimitBps_ ;
        /**
         * <pre>
         * bandwidth limits in "bits" per second between Envoy and upstream
         * </pre>
         *
         * <code>int64 upstream_limit_bps = 3;</code>
         */
        public long getUpstreamLimitBps() {
          return upstreamLimitBps_;
        }
        /**
         * <pre>
         * bandwidth limits in "bits" per second between Envoy and upstream
         * </pre>
         *
         * <code>int64 upstream_limit_bps = 3;</code>
         */
        public Builder setUpstreamLimitBps(long value) {
          
          upstreamLimitBps_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * bandwidth limits in "bits" per second between Envoy and upstream
         * </pre>
         *
         * <code>int64 upstream_limit_bps = 3;</code>
         */
        public Builder clearUpstreamLimitBps() {
          
          upstreamLimitBps_ = 0L;
          onChanged();
          return this;
        }

        private com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder> throttleAfterPeriodBuilder_;
        /**
         * <pre>
         * Wait a while after the connection is established, before
         * starting bandwidth throttling. This would allow us to inject fault
         * after the application protocol (e.g., MySQL) has had time to
         * establish sessions/whatever handshake necessary.
         * </pre>
         *
         * <code>.google.protobuf.Duration throttle_after_period = 4;</code>
         */
        public boolean hasThrottleAfterPeriod() {
          return throttleAfterCase_ == 4;
        }
        /**
         * <pre>
         * Wait a while after the connection is established, before
         * starting bandwidth throttling. This would allow us to inject fault
         * after the application protocol (e.g., MySQL) has had time to
         * establish sessions/whatever handshake necessary.
         * </pre>
         *
         * <code>.google.protobuf.Duration throttle_after_period = 4;</code>
         */
        public com.google.protobuf.Duration getThrottleAfterPeriod() {
          if (throttleAfterPeriodBuilder_ == null) {
            if (throttleAfterCase_ == 4) {
              return (com.google.protobuf.Duration) throttleAfter_;
            }
            return com.google.protobuf.Duration.getDefaultInstance();
          } else {
            if (throttleAfterCase_ == 4) {
              return throttleAfterPeriodBuilder_.getMessage();
            }
            return com.google.protobuf.Duration.getDefaultInstance();
          }
        }
        /**
         * <pre>
         * Wait a while after the connection is established, before
         * starting bandwidth throttling. This would allow us to inject fault
         * after the application protocol (e.g., MySQL) has had time to
         * establish sessions/whatever handshake necessary.
         * </pre>
         *
         * <code>.google.protobuf.Duration throttle_after_period = 4;</code>
         */
        public Builder setThrottleAfterPeriod(com.google.protobuf.Duration value) {
          if (throttleAfterPeriodBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            throttleAfter_ = value;
            onChanged();
          } else {
            throttleAfterPeriodBuilder_.setMessage(value);
          }
          throttleAfterCase_ = 4;
          return this;
        }
        /**
         * <pre>
         * Wait a while after the connection is established, before
         * starting bandwidth throttling. This would allow us to inject fault
         * after the application protocol (e.g., MySQL) has had time to
         * establish sessions/whatever handshake necessary.
         * </pre>
         *
         * <code>.google.protobuf.Duration throttle_after_period = 4;</code>
         */
        public Builder setThrottleAfterPeriod(
            com.google.protobuf.Duration.Builder builderForValue) {
          if (throttleAfterPeriodBuilder_ == null) {
            throttleAfter_ = builderForValue.build();
            onChanged();
          } else {
            throttleAfterPeriodBuilder_.setMessage(builderForValue.build());
          }
          throttleAfterCase_ = 4;
          return this;
        }
        /**
         * <pre>
         * Wait a while after the connection is established, before
         * starting bandwidth throttling. This would allow us to inject fault
         * after the application protocol (e.g., MySQL) has had time to
         * establish sessions/whatever handshake necessary.
         * </pre>
         *
         * <code>.google.protobuf.Duration throttle_after_period = 4;</code>
         */
        public Builder mergeThrottleAfterPeriod(com.google.protobuf.Duration value) {
          if (throttleAfterPeriodBuilder_ == null) {
            if (throttleAfterCase_ == 4 &&
                throttleAfter_ != com.google.protobuf.Duration.getDefaultInstance()) {
              throttleAfter_ = com.google.protobuf.Duration.newBuilder((com.google.protobuf.Duration) throttleAfter_)
                  .mergeFrom(value).buildPartial();
            } else {
              throttleAfter_ = value;
            }
            onChanged();
          } else {
            if (throttleAfterCase_ == 4) {
              throttleAfterPeriodBuilder_.mergeFrom(value);
            }
            throttleAfterPeriodBuilder_.setMessage(value);
          }
          throttleAfterCase_ = 4;
          return this;
        }
        /**
         * <pre>
         * Wait a while after the connection is established, before
         * starting bandwidth throttling. This would allow us to inject fault
         * after the application protocol (e.g., MySQL) has had time to
         * establish sessions/whatever handshake necessary.
         * </pre>
         *
         * <code>.google.protobuf.Duration throttle_after_period = 4;</code>
         */
        public Builder clearThrottleAfterPeriod() {
          if (throttleAfterPeriodBuilder_ == null) {
            if (throttleAfterCase_ == 4) {
              throttleAfterCase_ = 0;
              throttleAfter_ = null;
              onChanged();
            }
          } else {
            if (throttleAfterCase_ == 4) {
              throttleAfterCase_ = 0;
              throttleAfter_ = null;
            }
            throttleAfterPeriodBuilder_.clear();
          }
          return this;
        }
        /**
         * <pre>
         * Wait a while after the connection is established, before
         * starting bandwidth throttling. This would allow us to inject fault
         * after the application protocol (e.g., MySQL) has had time to
         * establish sessions/whatever handshake necessary.
         * </pre>
         *
         * <code>.google.protobuf.Duration throttle_after_period = 4;</code>
         */
        public com.google.protobuf.Duration.Builder getThrottleAfterPeriodBuilder() {
          return getThrottleAfterPeriodFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * Wait a while after the connection is established, before
         * starting bandwidth throttling. This would allow us to inject fault
         * after the application protocol (e.g., MySQL) has had time to
         * establish sessions/whatever handshake necessary.
         * </pre>
         *
         * <code>.google.protobuf.Duration throttle_after_period = 4;</code>
         */
        public com.google.protobuf.DurationOrBuilder getThrottleAfterPeriodOrBuilder() {
          if ((throttleAfterCase_ == 4) && (throttleAfterPeriodBuilder_ != null)) {
            return throttleAfterPeriodBuilder_.getMessageOrBuilder();
          } else {
            if (throttleAfterCase_ == 4) {
              return (com.google.protobuf.Duration) throttleAfter_;
            }
            return com.google.protobuf.Duration.getDefaultInstance();
          }
        }
        /**
         * <pre>
         * Wait a while after the connection is established, before
         * starting bandwidth throttling. This would allow us to inject fault
         * after the application protocol (e.g., MySQL) has had time to
         * establish sessions/whatever handshake necessary.
         * </pre>
         *
         * <code>.google.protobuf.Duration throttle_after_period = 4;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder> 
            getThrottleAfterPeriodFieldBuilder() {
          if (throttleAfterPeriodBuilder_ == null) {
            if (!(throttleAfterCase_ == 4)) {
              throttleAfter_ = com.google.protobuf.Duration.getDefaultInstance();
            }
            throttleAfterPeriodBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder>(
                    (com.google.protobuf.Duration) throttleAfter_,
                    getParentForChildren(),
                    isClean());
            throttleAfter_ = null;
          }
          throttleAfterCase_ = 4;
          onChanged();;
          return throttleAfterPeriodBuilder_;
        }

        /**
         * <pre>
         * Alternatively, we could wait for a certain number of bytes to be
         * transferred to upstream before throttling the bandwidth.
         * </pre>
         *
         * <code>double throttle_after_bytes = 5;</code>
         */
        public double getThrottleAfterBytes() {
          if (throttleAfterCase_ == 5) {
            return (java.lang.Double) throttleAfter_;
          }
          return 0D;
        }
        /**
         * <pre>
         * Alternatively, we could wait for a certain number of bytes to be
         * transferred to upstream before throttling the bandwidth.
         * </pre>
         *
         * <code>double throttle_after_bytes = 5;</code>
         */
        public Builder setThrottleAfterBytes(double value) {
          throttleAfterCase_ = 5;
          throttleAfter_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Alternatively, we could wait for a certain number of bytes to be
         * transferred to upstream before throttling the bandwidth.
         * </pre>
         *
         * <code>double throttle_after_bytes = 5;</code>
         */
        public Builder clearThrottleAfterBytes() {
          if (throttleAfterCase_ == 5) {
            throttleAfterCase_ = 0;
            throttleAfter_ = null;
            onChanged();
          }
          return this;
        }

        private com.google.protobuf.Duration throttleForPeriod_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder> throttleForPeriodBuilder_;
        /**
         * <pre>
         * Stop throttling after the given duration. If not set, the connection
         * will be throttled for its lifetime.
         * </pre>
         *
         * <code>.google.protobuf.Duration throttle_for_period = 6;</code>
         */
        public boolean hasThrottleForPeriod() {
          return throttleForPeriodBuilder_ != null || throttleForPeriod_ != null;
        }
        /**
         * <pre>
         * Stop throttling after the given duration. If not set, the connection
         * will be throttled for its lifetime.
         * </pre>
         *
         * <code>.google.protobuf.Duration throttle_for_period = 6;</code>
         */
        public com.google.protobuf.Duration getThrottleForPeriod() {
          if (throttleForPeriodBuilder_ == null) {
            return throttleForPeriod_ == null ? com.google.protobuf.Duration.getDefaultInstance() : throttleForPeriod_;
          } else {
            return throttleForPeriodBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * Stop throttling after the given duration. If not set, the connection
         * will be throttled for its lifetime.
         * </pre>
         *
         * <code>.google.protobuf.Duration throttle_for_period = 6;</code>
         */
        public Builder setThrottleForPeriod(com.google.protobuf.Duration value) {
          if (throttleForPeriodBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            throttleForPeriod_ = value;
            onChanged();
          } else {
            throttleForPeriodBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * Stop throttling after the given duration. If not set, the connection
         * will be throttled for its lifetime.
         * </pre>
         *
         * <code>.google.protobuf.Duration throttle_for_period = 6;</code>
         */
        public Builder setThrottleForPeriod(
            com.google.protobuf.Duration.Builder builderForValue) {
          if (throttleForPeriodBuilder_ == null) {
            throttleForPeriod_ = builderForValue.build();
            onChanged();
          } else {
            throttleForPeriodBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * Stop throttling after the given duration. If not set, the connection
         * will be throttled for its lifetime.
         * </pre>
         *
         * <code>.google.protobuf.Duration throttle_for_period = 6;</code>
         */
        public Builder mergeThrottleForPeriod(com.google.protobuf.Duration value) {
          if (throttleForPeriodBuilder_ == null) {
            if (throttleForPeriod_ != null) {
              throttleForPeriod_ =
                com.google.protobuf.Duration.newBuilder(throttleForPeriod_).mergeFrom(value).buildPartial();
            } else {
              throttleForPeriod_ = value;
            }
            onChanged();
          } else {
            throttleForPeriodBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * Stop throttling after the given duration. If not set, the connection
         * will be throttled for its lifetime.
         * </pre>
         *
         * <code>.google.protobuf.Duration throttle_for_period = 6;</code>
         */
        public Builder clearThrottleForPeriod() {
          if (throttleForPeriodBuilder_ == null) {
            throttleForPeriod_ = null;
            onChanged();
          } else {
            throttleForPeriod_ = null;
            throttleForPeriodBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * Stop throttling after the given duration. If not set, the connection
         * will be throttled for its lifetime.
         * </pre>
         *
         * <code>.google.protobuf.Duration throttle_for_period = 6;</code>
         */
        public com.google.protobuf.Duration.Builder getThrottleForPeriodBuilder() {
          
          onChanged();
          return getThrottleForPeriodFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * Stop throttling after the given duration. If not set, the connection
         * will be throttled for its lifetime.
         * </pre>
         *
         * <code>.google.protobuf.Duration throttle_for_period = 6;</code>
         */
        public com.google.protobuf.DurationOrBuilder getThrottleForPeriodOrBuilder() {
          if (throttleForPeriodBuilder_ != null) {
            return throttleForPeriodBuilder_.getMessageOrBuilder();
          } else {
            return throttleForPeriod_ == null ?
                com.google.protobuf.Duration.getDefaultInstance() : throttleForPeriod_;
          }
        }
        /**
         * <pre>
         * Stop throttling after the given duration. If not set, the connection
         * will be throttled for its lifetime.
         * </pre>
         *
         * <code>.google.protobuf.Duration throttle_for_period = 6;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder> 
            getThrottleForPeriodFieldBuilder() {
          if (throttleForPeriodBuilder_ == null) {
            throttleForPeriodBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder>(
                    getThrottleForPeriod(),
                    getParentForChildren(),
                    isClean());
            throttleForPeriod_ = null;
          }
          return throttleForPeriodBuilder_;
        }
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFieldsProto3(unknownFields);
        }

        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:istio.proxy.v1.config.L4FaultInjection.Throttle)
      }

      // @@protoc_insertion_point(class_scope:istio.proxy.v1.config.L4FaultInjection.Throttle)
      private static final istio.proxy.v1.config.L4Fault.L4FaultInjection.Throttle DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new istio.proxy.v1.config.L4Fault.L4FaultInjection.Throttle();
      }

      public static istio.proxy.v1.config.L4Fault.L4FaultInjection.Throttle getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<Throttle>
          PARSER = new com.google.protobuf.AbstractParser<Throttle>() {
        public Throttle parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new Throttle(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<Throttle> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<Throttle> getParserForType() {
        return PARSER;
      }

      public istio.proxy.v1.config.L4Fault.L4FaultInjection.Throttle getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface TerminateOrBuilder extends
        // @@protoc_insertion_point(interface_extends:istio.proxy.v1.config.L4FaultInjection.Terminate)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * percentage of established Tcp connections to be terminated/reset
       * </pre>
       *
       * <code>float percent = 1;</code>
       */
      float getPercent();

      /**
       * <pre>
       * TODO: see if it makes sense to create a generic Duration type to
       * express time interval related configs.
       * </pre>
       *
       * <code>.google.protobuf.Duration terminate_after_period = 2;</code>
       */
      boolean hasTerminateAfterPeriod();
      /**
       * <pre>
       * TODO: see if it makes sense to create a generic Duration type to
       * express time interval related configs.
       * </pre>
       *
       * <code>.google.protobuf.Duration terminate_after_period = 2;</code>
       */
      com.google.protobuf.Duration getTerminateAfterPeriod();
      /**
       * <pre>
       * TODO: see if it makes sense to create a generic Duration type to
       * express time interval related configs.
       * </pre>
       *
       * <code>.google.protobuf.Duration terminate_after_period = 2;</code>
       */
      com.google.protobuf.DurationOrBuilder getTerminateAfterPeriodOrBuilder();
    }
    /**
     * <pre>
     * Abruptly reset (terminate) the Tcp connection after it has been
     * established, emulating remote server crash or link failure.
     * </pre>
     *
     * Protobuf type {@code istio.proxy.v1.config.L4FaultInjection.Terminate}
     */
    public  static final class Terminate extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:istio.proxy.v1.config.L4FaultInjection.Terminate)
        TerminateOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use Terminate.newBuilder() to construct.
      private Terminate(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private Terminate() {
        percent_ = 0F;
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private Terminate(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownFieldProto3(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 13: {

                percent_ = input.readFloat();
                break;
              }
              case 18: {
                com.google.protobuf.Duration.Builder subBuilder = null;
                if (terminateAfterPeriod_ != null) {
                  subBuilder = terminateAfterPeriod_.toBuilder();
                }
                terminateAfterPeriod_ = input.readMessage(com.google.protobuf.Duration.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(terminateAfterPeriod_);
                  terminateAfterPeriod_ = subBuilder.buildPartial();
                }

                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return istio.proxy.v1.config.L4Fault.internal_static_istio_proxy_v1_config_L4FaultInjection_Terminate_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return istio.proxy.v1.config.L4Fault.internal_static_istio_proxy_v1_config_L4FaultInjection_Terminate_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                istio.proxy.v1.config.L4Fault.L4FaultInjection.Terminate.class, istio.proxy.v1.config.L4Fault.L4FaultInjection.Terminate.Builder.class);
      }

      public static final int PERCENT_FIELD_NUMBER = 1;
      private float percent_;
      /**
       * <pre>
       * percentage of established Tcp connections to be terminated/reset
       * </pre>
       *
       * <code>float percent = 1;</code>
       */
      public float getPercent() {
        return percent_;
      }

      public static final int TERMINATE_AFTER_PERIOD_FIELD_NUMBER = 2;
      private com.google.protobuf.Duration terminateAfterPeriod_;
      /**
       * <pre>
       * TODO: see if it makes sense to create a generic Duration type to
       * express time interval related configs.
       * </pre>
       *
       * <code>.google.protobuf.Duration terminate_after_period = 2;</code>
       */
      public boolean hasTerminateAfterPeriod() {
        return terminateAfterPeriod_ != null;
      }
      /**
       * <pre>
       * TODO: see if it makes sense to create a generic Duration type to
       * express time interval related configs.
       * </pre>
       *
       * <code>.google.protobuf.Duration terminate_after_period = 2;</code>
       */
      public com.google.protobuf.Duration getTerminateAfterPeriod() {
        return terminateAfterPeriod_ == null ? com.google.protobuf.Duration.getDefaultInstance() : terminateAfterPeriod_;
      }
      /**
       * <pre>
       * TODO: see if it makes sense to create a generic Duration type to
       * express time interval related configs.
       * </pre>
       *
       * <code>.google.protobuf.Duration terminate_after_period = 2;</code>
       */
      public com.google.protobuf.DurationOrBuilder getTerminateAfterPeriodOrBuilder() {
        return getTerminateAfterPeriod();
      }

      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (percent_ != 0F) {
          output.writeFloat(1, percent_);
        }
        if (terminateAfterPeriod_ != null) {
          output.writeMessage(2, getTerminateAfterPeriod());
        }
        unknownFields.writeTo(output);
      }

      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (percent_ != 0F) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(1, percent_);
        }
        if (terminateAfterPeriod_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, getTerminateAfterPeriod());
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof istio.proxy.v1.config.L4Fault.L4FaultInjection.Terminate)) {
          return super.equals(obj);
        }
        istio.proxy.v1.config.L4Fault.L4FaultInjection.Terminate other = (istio.proxy.v1.config.L4Fault.L4FaultInjection.Terminate) obj;

        boolean result = true;
        result = result && (
            java.lang.Float.floatToIntBits(getPercent())
            == java.lang.Float.floatToIntBits(
                other.getPercent()));
        result = result && (hasTerminateAfterPeriod() == other.hasTerminateAfterPeriod());
        if (hasTerminateAfterPeriod()) {
          result = result && getTerminateAfterPeriod()
              .equals(other.getTerminateAfterPeriod());
        }
        result = result && unknownFields.equals(other.unknownFields);
        return result;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + PERCENT_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getPercent());
        if (hasTerminateAfterPeriod()) {
          hash = (37 * hash) + TERMINATE_AFTER_PERIOD_FIELD_NUMBER;
          hash = (53 * hash) + getTerminateAfterPeriod().hashCode();
        }
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static istio.proxy.v1.config.L4Fault.L4FaultInjection.Terminate parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static istio.proxy.v1.config.L4Fault.L4FaultInjection.Terminate parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static istio.proxy.v1.config.L4Fault.L4FaultInjection.Terminate parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static istio.proxy.v1.config.L4Fault.L4FaultInjection.Terminate parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static istio.proxy.v1.config.L4Fault.L4FaultInjection.Terminate parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static istio.proxy.v1.config.L4Fault.L4FaultInjection.Terminate parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static istio.proxy.v1.config.L4Fault.L4FaultInjection.Terminate parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static istio.proxy.v1.config.L4Fault.L4FaultInjection.Terminate parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static istio.proxy.v1.config.L4Fault.L4FaultInjection.Terminate parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static istio.proxy.v1.config.L4Fault.L4FaultInjection.Terminate parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static istio.proxy.v1.config.L4Fault.L4FaultInjection.Terminate parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static istio.proxy.v1.config.L4Fault.L4FaultInjection.Terminate parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(istio.proxy.v1.config.L4Fault.L4FaultInjection.Terminate prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * Abruptly reset (terminate) the Tcp connection after it has been
       * established, emulating remote server crash or link failure.
       * </pre>
       *
       * Protobuf type {@code istio.proxy.v1.config.L4FaultInjection.Terminate}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:istio.proxy.v1.config.L4FaultInjection.Terminate)
          istio.proxy.v1.config.L4Fault.L4FaultInjection.TerminateOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return istio.proxy.v1.config.L4Fault.internal_static_istio_proxy_v1_config_L4FaultInjection_Terminate_descriptor;
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return istio.proxy.v1.config.L4Fault.internal_static_istio_proxy_v1_config_L4FaultInjection_Terminate_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  istio.proxy.v1.config.L4Fault.L4FaultInjection.Terminate.class, istio.proxy.v1.config.L4Fault.L4FaultInjection.Terminate.Builder.class);
        }

        // Construct using istio.proxy.v1.config.L4Fault.L4FaultInjection.Terminate.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        public Builder clear() {
          super.clear();
          percent_ = 0F;

          if (terminateAfterPeriodBuilder_ == null) {
            terminateAfterPeriod_ = null;
          } else {
            terminateAfterPeriod_ = null;
            terminateAfterPeriodBuilder_ = null;
          }
          return this;
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return istio.proxy.v1.config.L4Fault.internal_static_istio_proxy_v1_config_L4FaultInjection_Terminate_descriptor;
        }

        public istio.proxy.v1.config.L4Fault.L4FaultInjection.Terminate getDefaultInstanceForType() {
          return istio.proxy.v1.config.L4Fault.L4FaultInjection.Terminate.getDefaultInstance();
        }

        public istio.proxy.v1.config.L4Fault.L4FaultInjection.Terminate build() {
          istio.proxy.v1.config.L4Fault.L4FaultInjection.Terminate result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public istio.proxy.v1.config.L4Fault.L4FaultInjection.Terminate buildPartial() {
          istio.proxy.v1.config.L4Fault.L4FaultInjection.Terminate result = new istio.proxy.v1.config.L4Fault.L4FaultInjection.Terminate(this);
          result.percent_ = percent_;
          if (terminateAfterPeriodBuilder_ == null) {
            result.terminateAfterPeriod_ = terminateAfterPeriod_;
          } else {
            result.terminateAfterPeriod_ = terminateAfterPeriodBuilder_.build();
          }
          onBuilt();
          return result;
        }

        public Builder clone() {
          return (Builder) super.clone();
        }
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return (Builder) super.setField(field, value);
        }
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return (Builder) super.clearField(field);
        }
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return (Builder) super.clearOneof(oneof);
        }
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return (Builder) super.setRepeatedField(field, index, value);
        }
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return (Builder) super.addRepeatedField(field, value);
        }
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof istio.proxy.v1.config.L4Fault.L4FaultInjection.Terminate) {
            return mergeFrom((istio.proxy.v1.config.L4Fault.L4FaultInjection.Terminate)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(istio.proxy.v1.config.L4Fault.L4FaultInjection.Terminate other) {
          if (other == istio.proxy.v1.config.L4Fault.L4FaultInjection.Terminate.getDefaultInstance()) return this;
          if (other.getPercent() != 0F) {
            setPercent(other.getPercent());
          }
          if (other.hasTerminateAfterPeriod()) {
            mergeTerminateAfterPeriod(other.getTerminateAfterPeriod());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          istio.proxy.v1.config.L4Fault.L4FaultInjection.Terminate parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (istio.proxy.v1.config.L4Fault.L4FaultInjection.Terminate) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }

        private float percent_ ;
        /**
         * <pre>
         * percentage of established Tcp connections to be terminated/reset
         * </pre>
         *
         * <code>float percent = 1;</code>
         */
        public float getPercent() {
          return percent_;
        }
        /**
         * <pre>
         * percentage of established Tcp connections to be terminated/reset
         * </pre>
         *
         * <code>float percent = 1;</code>
         */
        public Builder setPercent(float value) {
          
          percent_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * percentage of established Tcp connections to be terminated/reset
         * </pre>
         *
         * <code>float percent = 1;</code>
         */
        public Builder clearPercent() {
          
          percent_ = 0F;
          onChanged();
          return this;
        }

        private com.google.protobuf.Duration terminateAfterPeriod_ = null;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder> terminateAfterPeriodBuilder_;
        /**
         * <pre>
         * TODO: see if it makes sense to create a generic Duration type to
         * express time interval related configs.
         * </pre>
         *
         * <code>.google.protobuf.Duration terminate_after_period = 2;</code>
         */
        public boolean hasTerminateAfterPeriod() {
          return terminateAfterPeriodBuilder_ != null || terminateAfterPeriod_ != null;
        }
        /**
         * <pre>
         * TODO: see if it makes sense to create a generic Duration type to
         * express time interval related configs.
         * </pre>
         *
         * <code>.google.protobuf.Duration terminate_after_period = 2;</code>
         */
        public com.google.protobuf.Duration getTerminateAfterPeriod() {
          if (terminateAfterPeriodBuilder_ == null) {
            return terminateAfterPeriod_ == null ? com.google.protobuf.Duration.getDefaultInstance() : terminateAfterPeriod_;
          } else {
            return terminateAfterPeriodBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * TODO: see if it makes sense to create a generic Duration type to
         * express time interval related configs.
         * </pre>
         *
         * <code>.google.protobuf.Duration terminate_after_period = 2;</code>
         */
        public Builder setTerminateAfterPeriod(com.google.protobuf.Duration value) {
          if (terminateAfterPeriodBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            terminateAfterPeriod_ = value;
            onChanged();
          } else {
            terminateAfterPeriodBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * TODO: see if it makes sense to create a generic Duration type to
         * express time interval related configs.
         * </pre>
         *
         * <code>.google.protobuf.Duration terminate_after_period = 2;</code>
         */
        public Builder setTerminateAfterPeriod(
            com.google.protobuf.Duration.Builder builderForValue) {
          if (terminateAfterPeriodBuilder_ == null) {
            terminateAfterPeriod_ = builderForValue.build();
            onChanged();
          } else {
            terminateAfterPeriodBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * TODO: see if it makes sense to create a generic Duration type to
         * express time interval related configs.
         * </pre>
         *
         * <code>.google.protobuf.Duration terminate_after_period = 2;</code>
         */
        public Builder mergeTerminateAfterPeriod(com.google.protobuf.Duration value) {
          if (terminateAfterPeriodBuilder_ == null) {
            if (terminateAfterPeriod_ != null) {
              terminateAfterPeriod_ =
                com.google.protobuf.Duration.newBuilder(terminateAfterPeriod_).mergeFrom(value).buildPartial();
            } else {
              terminateAfterPeriod_ = value;
            }
            onChanged();
          } else {
            terminateAfterPeriodBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * TODO: see if it makes sense to create a generic Duration type to
         * express time interval related configs.
         * </pre>
         *
         * <code>.google.protobuf.Duration terminate_after_period = 2;</code>
         */
        public Builder clearTerminateAfterPeriod() {
          if (terminateAfterPeriodBuilder_ == null) {
            terminateAfterPeriod_ = null;
            onChanged();
          } else {
            terminateAfterPeriod_ = null;
            terminateAfterPeriodBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * TODO: see if it makes sense to create a generic Duration type to
         * express time interval related configs.
         * </pre>
         *
         * <code>.google.protobuf.Duration terminate_after_period = 2;</code>
         */
        public com.google.protobuf.Duration.Builder getTerminateAfterPeriodBuilder() {
          
          onChanged();
          return getTerminateAfterPeriodFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * TODO: see if it makes sense to create a generic Duration type to
         * express time interval related configs.
         * </pre>
         *
         * <code>.google.protobuf.Duration terminate_after_period = 2;</code>
         */
        public com.google.protobuf.DurationOrBuilder getTerminateAfterPeriodOrBuilder() {
          if (terminateAfterPeriodBuilder_ != null) {
            return terminateAfterPeriodBuilder_.getMessageOrBuilder();
          } else {
            return terminateAfterPeriod_ == null ?
                com.google.protobuf.Duration.getDefaultInstance() : terminateAfterPeriod_;
          }
        }
        /**
         * <pre>
         * TODO: see if it makes sense to create a generic Duration type to
         * express time interval related configs.
         * </pre>
         *
         * <code>.google.protobuf.Duration terminate_after_period = 2;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder> 
            getTerminateAfterPeriodFieldBuilder() {
          if (terminateAfterPeriodBuilder_ == null) {
            terminateAfterPeriodBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder>(
                    getTerminateAfterPeriod(),
                    getParentForChildren(),
                    isClean());
            terminateAfterPeriod_ = null;
          }
          return terminateAfterPeriodBuilder_;
        }
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFieldsProto3(unknownFields);
        }

        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:istio.proxy.v1.config.L4FaultInjection.Terminate)
      }

      // @@protoc_insertion_point(class_scope:istio.proxy.v1.config.L4FaultInjection.Terminate)
      private static final istio.proxy.v1.config.L4Fault.L4FaultInjection.Terminate DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new istio.proxy.v1.config.L4Fault.L4FaultInjection.Terminate();
      }

      public static istio.proxy.v1.config.L4Fault.L4FaultInjection.Terminate getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<Terminate>
          PARSER = new com.google.protobuf.AbstractParser<Terminate>() {
        public Terminate parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new Terminate(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<Terminate> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<Terminate> getParserForType() {
        return PARSER;
      }

      public istio.proxy.v1.config.L4Fault.L4FaultInjection.Terminate getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public static final int THROTTLE_FIELD_NUMBER = 1;
    private istio.proxy.v1.config.L4Fault.L4FaultInjection.Throttle throttle_;
    /**
     * <pre>
     * Unlike Http services, we have very little context for raw Tcp|Udp
     * connections. We could throttle bandwidth of the connections (slow down
     * the connection) and/or abruptly reset (terminate) the Tcp connection
     * after it has been established.
     * We first throttle (if set) and then terminate the connection.
     * </pre>
     *
     * <code>.istio.proxy.v1.config.L4FaultInjection.Throttle throttle = 1;</code>
     */
    public boolean hasThrottle() {
      return throttle_ != null;
    }
    /**
     * <pre>
     * Unlike Http services, we have very little context for raw Tcp|Udp
     * connections. We could throttle bandwidth of the connections (slow down
     * the connection) and/or abruptly reset (terminate) the Tcp connection
     * after it has been established.
     * We first throttle (if set) and then terminate the connection.
     * </pre>
     *
     * <code>.istio.proxy.v1.config.L4FaultInjection.Throttle throttle = 1;</code>
     */
    public istio.proxy.v1.config.L4Fault.L4FaultInjection.Throttle getThrottle() {
      return throttle_ == null ? istio.proxy.v1.config.L4Fault.L4FaultInjection.Throttle.getDefaultInstance() : throttle_;
    }
    /**
     * <pre>
     * Unlike Http services, we have very little context for raw Tcp|Udp
     * connections. We could throttle bandwidth of the connections (slow down
     * the connection) and/or abruptly reset (terminate) the Tcp connection
     * after it has been established.
     * We first throttle (if set) and then terminate the connection.
     * </pre>
     *
     * <code>.istio.proxy.v1.config.L4FaultInjection.Throttle throttle = 1;</code>
     */
    public istio.proxy.v1.config.L4Fault.L4FaultInjection.ThrottleOrBuilder getThrottleOrBuilder() {
      return getThrottle();
    }

    public static final int TERMINATE_FIELD_NUMBER = 2;
    private istio.proxy.v1.config.L4Fault.L4FaultInjection.Terminate terminate_;
    /**
     * <code>.istio.proxy.v1.config.L4FaultInjection.Terminate terminate = 2;</code>
     */
    public boolean hasTerminate() {
      return terminate_ != null;
    }
    /**
     * <code>.istio.proxy.v1.config.L4FaultInjection.Terminate terminate = 2;</code>
     */
    public istio.proxy.v1.config.L4Fault.L4FaultInjection.Terminate getTerminate() {
      return terminate_ == null ? istio.proxy.v1.config.L4Fault.L4FaultInjection.Terminate.getDefaultInstance() : terminate_;
    }
    /**
     * <code>.istio.proxy.v1.config.L4FaultInjection.Terminate terminate = 2;</code>
     */
    public istio.proxy.v1.config.L4Fault.L4FaultInjection.TerminateOrBuilder getTerminateOrBuilder() {
      return getTerminate();
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (throttle_ != null) {
        output.writeMessage(1, getThrottle());
      }
      if (terminate_ != null) {
        output.writeMessage(2, getTerminate());
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (throttle_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getThrottle());
      }
      if (terminate_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getTerminate());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof istio.proxy.v1.config.L4Fault.L4FaultInjection)) {
        return super.equals(obj);
      }
      istio.proxy.v1.config.L4Fault.L4FaultInjection other = (istio.proxy.v1.config.L4Fault.L4FaultInjection) obj;

      boolean result = true;
      result = result && (hasThrottle() == other.hasThrottle());
      if (hasThrottle()) {
        result = result && getThrottle()
            .equals(other.getThrottle());
      }
      result = result && (hasTerminate() == other.hasTerminate());
      if (hasTerminate()) {
        result = result && getTerminate()
            .equals(other.getTerminate());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasThrottle()) {
        hash = (37 * hash) + THROTTLE_FIELD_NUMBER;
        hash = (53 * hash) + getThrottle().hashCode();
      }
      if (hasTerminate()) {
        hash = (37 * hash) + TERMINATE_FIELD_NUMBER;
        hash = (53 * hash) + getTerminate().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static istio.proxy.v1.config.L4Fault.L4FaultInjection parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static istio.proxy.v1.config.L4Fault.L4FaultInjection parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static istio.proxy.v1.config.L4Fault.L4FaultInjection parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static istio.proxy.v1.config.L4Fault.L4FaultInjection parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static istio.proxy.v1.config.L4Fault.L4FaultInjection parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static istio.proxy.v1.config.L4Fault.L4FaultInjection parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static istio.proxy.v1.config.L4Fault.L4FaultInjection parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static istio.proxy.v1.config.L4Fault.L4FaultInjection parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static istio.proxy.v1.config.L4Fault.L4FaultInjection parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static istio.proxy.v1.config.L4Fault.L4FaultInjection parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static istio.proxy.v1.config.L4Fault.L4FaultInjection parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static istio.proxy.v1.config.L4Fault.L4FaultInjection parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(istio.proxy.v1.config.L4Fault.L4FaultInjection prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * (-- Faults can be injected into the connections from downstream by the
     * Envoy, for testing the failure recovery capabilities of downstream
     * services.  Faults include aborting the connection from downstream
     * service, delaying proxying of connection to the destination
     * service, and throttling the bandwidth of the connection (either
     * end). Bandwidth throttling for failure testing should not be confused
     * with the rate limiting policy enforcement provided by the Mixer
     * component. L4 fault injection is not supported at the moment. --)
     * </pre>
     *
     * Protobuf type {@code istio.proxy.v1.config.L4FaultInjection}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:istio.proxy.v1.config.L4FaultInjection)
        istio.proxy.v1.config.L4Fault.L4FaultInjectionOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return istio.proxy.v1.config.L4Fault.internal_static_istio_proxy_v1_config_L4FaultInjection_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return istio.proxy.v1.config.L4Fault.internal_static_istio_proxy_v1_config_L4FaultInjection_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                istio.proxy.v1.config.L4Fault.L4FaultInjection.class, istio.proxy.v1.config.L4Fault.L4FaultInjection.Builder.class);
      }

      // Construct using istio.proxy.v1.config.L4Fault.L4FaultInjection.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        if (throttleBuilder_ == null) {
          throttle_ = null;
        } else {
          throttle_ = null;
          throttleBuilder_ = null;
        }
        if (terminateBuilder_ == null) {
          terminate_ = null;
        } else {
          terminate_ = null;
          terminateBuilder_ = null;
        }
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return istio.proxy.v1.config.L4Fault.internal_static_istio_proxy_v1_config_L4FaultInjection_descriptor;
      }

      public istio.proxy.v1.config.L4Fault.L4FaultInjection getDefaultInstanceForType() {
        return istio.proxy.v1.config.L4Fault.L4FaultInjection.getDefaultInstance();
      }

      public istio.proxy.v1.config.L4Fault.L4FaultInjection build() {
        istio.proxy.v1.config.L4Fault.L4FaultInjection result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public istio.proxy.v1.config.L4Fault.L4FaultInjection buildPartial() {
        istio.proxy.v1.config.L4Fault.L4FaultInjection result = new istio.proxy.v1.config.L4Fault.L4FaultInjection(this);
        if (throttleBuilder_ == null) {
          result.throttle_ = throttle_;
        } else {
          result.throttle_ = throttleBuilder_.build();
        }
        if (terminateBuilder_ == null) {
          result.terminate_ = terminate_;
        } else {
          result.terminate_ = terminateBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof istio.proxy.v1.config.L4Fault.L4FaultInjection) {
          return mergeFrom((istio.proxy.v1.config.L4Fault.L4FaultInjection)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(istio.proxy.v1.config.L4Fault.L4FaultInjection other) {
        if (other == istio.proxy.v1.config.L4Fault.L4FaultInjection.getDefaultInstance()) return this;
        if (other.hasThrottle()) {
          mergeThrottle(other.getThrottle());
        }
        if (other.hasTerminate()) {
          mergeTerminate(other.getTerminate());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        istio.proxy.v1.config.L4Fault.L4FaultInjection parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (istio.proxy.v1.config.L4Fault.L4FaultInjection) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private istio.proxy.v1.config.L4Fault.L4FaultInjection.Throttle throttle_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          istio.proxy.v1.config.L4Fault.L4FaultInjection.Throttle, istio.proxy.v1.config.L4Fault.L4FaultInjection.Throttle.Builder, istio.proxy.v1.config.L4Fault.L4FaultInjection.ThrottleOrBuilder> throttleBuilder_;
      /**
       * <pre>
       * Unlike Http services, we have very little context for raw Tcp|Udp
       * connections. We could throttle bandwidth of the connections (slow down
       * the connection) and/or abruptly reset (terminate) the Tcp connection
       * after it has been established.
       * We first throttle (if set) and then terminate the connection.
       * </pre>
       *
       * <code>.istio.proxy.v1.config.L4FaultInjection.Throttle throttle = 1;</code>
       */
      public boolean hasThrottle() {
        return throttleBuilder_ != null || throttle_ != null;
      }
      /**
       * <pre>
       * Unlike Http services, we have very little context for raw Tcp|Udp
       * connections. We could throttle bandwidth of the connections (slow down
       * the connection) and/or abruptly reset (terminate) the Tcp connection
       * after it has been established.
       * We first throttle (if set) and then terminate the connection.
       * </pre>
       *
       * <code>.istio.proxy.v1.config.L4FaultInjection.Throttle throttle = 1;</code>
       */
      public istio.proxy.v1.config.L4Fault.L4FaultInjection.Throttle getThrottle() {
        if (throttleBuilder_ == null) {
          return throttle_ == null ? istio.proxy.v1.config.L4Fault.L4FaultInjection.Throttle.getDefaultInstance() : throttle_;
        } else {
          return throttleBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Unlike Http services, we have very little context for raw Tcp|Udp
       * connections. We could throttle bandwidth of the connections (slow down
       * the connection) and/or abruptly reset (terminate) the Tcp connection
       * after it has been established.
       * We first throttle (if set) and then terminate the connection.
       * </pre>
       *
       * <code>.istio.proxy.v1.config.L4FaultInjection.Throttle throttle = 1;</code>
       */
      public Builder setThrottle(istio.proxy.v1.config.L4Fault.L4FaultInjection.Throttle value) {
        if (throttleBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          throttle_ = value;
          onChanged();
        } else {
          throttleBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Unlike Http services, we have very little context for raw Tcp|Udp
       * connections. We could throttle bandwidth of the connections (slow down
       * the connection) and/or abruptly reset (terminate) the Tcp connection
       * after it has been established.
       * We first throttle (if set) and then terminate the connection.
       * </pre>
       *
       * <code>.istio.proxy.v1.config.L4FaultInjection.Throttle throttle = 1;</code>
       */
      public Builder setThrottle(
          istio.proxy.v1.config.L4Fault.L4FaultInjection.Throttle.Builder builderForValue) {
        if (throttleBuilder_ == null) {
          throttle_ = builderForValue.build();
          onChanged();
        } else {
          throttleBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Unlike Http services, we have very little context for raw Tcp|Udp
       * connections. We could throttle bandwidth of the connections (slow down
       * the connection) and/or abruptly reset (terminate) the Tcp connection
       * after it has been established.
       * We first throttle (if set) and then terminate the connection.
       * </pre>
       *
       * <code>.istio.proxy.v1.config.L4FaultInjection.Throttle throttle = 1;</code>
       */
      public Builder mergeThrottle(istio.proxy.v1.config.L4Fault.L4FaultInjection.Throttle value) {
        if (throttleBuilder_ == null) {
          if (throttle_ != null) {
            throttle_ =
              istio.proxy.v1.config.L4Fault.L4FaultInjection.Throttle.newBuilder(throttle_).mergeFrom(value).buildPartial();
          } else {
            throttle_ = value;
          }
          onChanged();
        } else {
          throttleBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Unlike Http services, we have very little context for raw Tcp|Udp
       * connections. We could throttle bandwidth of the connections (slow down
       * the connection) and/or abruptly reset (terminate) the Tcp connection
       * after it has been established.
       * We first throttle (if set) and then terminate the connection.
       * </pre>
       *
       * <code>.istio.proxy.v1.config.L4FaultInjection.Throttle throttle = 1;</code>
       */
      public Builder clearThrottle() {
        if (throttleBuilder_ == null) {
          throttle_ = null;
          onChanged();
        } else {
          throttle_ = null;
          throttleBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Unlike Http services, we have very little context for raw Tcp|Udp
       * connections. We could throttle bandwidth of the connections (slow down
       * the connection) and/or abruptly reset (terminate) the Tcp connection
       * after it has been established.
       * We first throttle (if set) and then terminate the connection.
       * </pre>
       *
       * <code>.istio.proxy.v1.config.L4FaultInjection.Throttle throttle = 1;</code>
       */
      public istio.proxy.v1.config.L4Fault.L4FaultInjection.Throttle.Builder getThrottleBuilder() {
        
        onChanged();
        return getThrottleFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Unlike Http services, we have very little context for raw Tcp|Udp
       * connections. We could throttle bandwidth of the connections (slow down
       * the connection) and/or abruptly reset (terminate) the Tcp connection
       * after it has been established.
       * We first throttle (if set) and then terminate the connection.
       * </pre>
       *
       * <code>.istio.proxy.v1.config.L4FaultInjection.Throttle throttle = 1;</code>
       */
      public istio.proxy.v1.config.L4Fault.L4FaultInjection.ThrottleOrBuilder getThrottleOrBuilder() {
        if (throttleBuilder_ != null) {
          return throttleBuilder_.getMessageOrBuilder();
        } else {
          return throttle_ == null ?
              istio.proxy.v1.config.L4Fault.L4FaultInjection.Throttle.getDefaultInstance() : throttle_;
        }
      }
      /**
       * <pre>
       * Unlike Http services, we have very little context for raw Tcp|Udp
       * connections. We could throttle bandwidth of the connections (slow down
       * the connection) and/or abruptly reset (terminate) the Tcp connection
       * after it has been established.
       * We first throttle (if set) and then terminate the connection.
       * </pre>
       *
       * <code>.istio.proxy.v1.config.L4FaultInjection.Throttle throttle = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          istio.proxy.v1.config.L4Fault.L4FaultInjection.Throttle, istio.proxy.v1.config.L4Fault.L4FaultInjection.Throttle.Builder, istio.proxy.v1.config.L4Fault.L4FaultInjection.ThrottleOrBuilder> 
          getThrottleFieldBuilder() {
        if (throttleBuilder_ == null) {
          throttleBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              istio.proxy.v1.config.L4Fault.L4FaultInjection.Throttle, istio.proxy.v1.config.L4Fault.L4FaultInjection.Throttle.Builder, istio.proxy.v1.config.L4Fault.L4FaultInjection.ThrottleOrBuilder>(
                  getThrottle(),
                  getParentForChildren(),
                  isClean());
          throttle_ = null;
        }
        return throttleBuilder_;
      }

      private istio.proxy.v1.config.L4Fault.L4FaultInjection.Terminate terminate_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          istio.proxy.v1.config.L4Fault.L4FaultInjection.Terminate, istio.proxy.v1.config.L4Fault.L4FaultInjection.Terminate.Builder, istio.proxy.v1.config.L4Fault.L4FaultInjection.TerminateOrBuilder> terminateBuilder_;
      /**
       * <code>.istio.proxy.v1.config.L4FaultInjection.Terminate terminate = 2;</code>
       */
      public boolean hasTerminate() {
        return terminateBuilder_ != null || terminate_ != null;
      }
      /**
       * <code>.istio.proxy.v1.config.L4FaultInjection.Terminate terminate = 2;</code>
       */
      public istio.proxy.v1.config.L4Fault.L4FaultInjection.Terminate getTerminate() {
        if (terminateBuilder_ == null) {
          return terminate_ == null ? istio.proxy.v1.config.L4Fault.L4FaultInjection.Terminate.getDefaultInstance() : terminate_;
        } else {
          return terminateBuilder_.getMessage();
        }
      }
      /**
       * <code>.istio.proxy.v1.config.L4FaultInjection.Terminate terminate = 2;</code>
       */
      public Builder setTerminate(istio.proxy.v1.config.L4Fault.L4FaultInjection.Terminate value) {
        if (terminateBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          terminate_ = value;
          onChanged();
        } else {
          terminateBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.istio.proxy.v1.config.L4FaultInjection.Terminate terminate = 2;</code>
       */
      public Builder setTerminate(
          istio.proxy.v1.config.L4Fault.L4FaultInjection.Terminate.Builder builderForValue) {
        if (terminateBuilder_ == null) {
          terminate_ = builderForValue.build();
          onChanged();
        } else {
          terminateBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.istio.proxy.v1.config.L4FaultInjection.Terminate terminate = 2;</code>
       */
      public Builder mergeTerminate(istio.proxy.v1.config.L4Fault.L4FaultInjection.Terminate value) {
        if (terminateBuilder_ == null) {
          if (terminate_ != null) {
            terminate_ =
              istio.proxy.v1.config.L4Fault.L4FaultInjection.Terminate.newBuilder(terminate_).mergeFrom(value).buildPartial();
          } else {
            terminate_ = value;
          }
          onChanged();
        } else {
          terminateBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.istio.proxy.v1.config.L4FaultInjection.Terminate terminate = 2;</code>
       */
      public Builder clearTerminate() {
        if (terminateBuilder_ == null) {
          terminate_ = null;
          onChanged();
        } else {
          terminate_ = null;
          terminateBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.istio.proxy.v1.config.L4FaultInjection.Terminate terminate = 2;</code>
       */
      public istio.proxy.v1.config.L4Fault.L4FaultInjection.Terminate.Builder getTerminateBuilder() {
        
        onChanged();
        return getTerminateFieldBuilder().getBuilder();
      }
      /**
       * <code>.istio.proxy.v1.config.L4FaultInjection.Terminate terminate = 2;</code>
       */
      public istio.proxy.v1.config.L4Fault.L4FaultInjection.TerminateOrBuilder getTerminateOrBuilder() {
        if (terminateBuilder_ != null) {
          return terminateBuilder_.getMessageOrBuilder();
        } else {
          return terminate_ == null ?
              istio.proxy.v1.config.L4Fault.L4FaultInjection.Terminate.getDefaultInstance() : terminate_;
        }
      }
      /**
       * <code>.istio.proxy.v1.config.L4FaultInjection.Terminate terminate = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          istio.proxy.v1.config.L4Fault.L4FaultInjection.Terminate, istio.proxy.v1.config.L4Fault.L4FaultInjection.Terminate.Builder, istio.proxy.v1.config.L4Fault.L4FaultInjection.TerminateOrBuilder> 
          getTerminateFieldBuilder() {
        if (terminateBuilder_ == null) {
          terminateBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              istio.proxy.v1.config.L4Fault.L4FaultInjection.Terminate, istio.proxy.v1.config.L4Fault.L4FaultInjection.Terminate.Builder, istio.proxy.v1.config.L4Fault.L4FaultInjection.TerminateOrBuilder>(
                  getTerminate(),
                  getParentForChildren(),
                  isClean());
          terminate_ = null;
        }
        return terminateBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:istio.proxy.v1.config.L4FaultInjection)
    }

    // @@protoc_insertion_point(class_scope:istio.proxy.v1.config.L4FaultInjection)
    private static final istio.proxy.v1.config.L4Fault.L4FaultInjection DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new istio.proxy.v1.config.L4Fault.L4FaultInjection();
    }

    public static istio.proxy.v1.config.L4Fault.L4FaultInjection getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<L4FaultInjection>
        PARSER = new com.google.protobuf.AbstractParser<L4FaultInjection>() {
      public L4FaultInjection parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new L4FaultInjection(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<L4FaultInjection> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<L4FaultInjection> getParserForType() {
      return PARSER;
    }

    public istio.proxy.v1.config.L4Fault.L4FaultInjection getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_istio_proxy_v1_config_L4FaultInjection_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_istio_proxy_v1_config_L4FaultInjection_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_istio_proxy_v1_config_L4FaultInjection_Throttle_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_istio_proxy_v1_config_L4FaultInjection_Throttle_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_istio_proxy_v1_config_L4FaultInjection_Terminate_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_istio_proxy_v1_config_L4FaultInjection_Terminate_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\036proxy/v1/config/l4_fault.proto\022\025istio." +
      "proxy.v1.config\032\036google/protobuf/duratio" +
      "n.proto\"\363\003\n\020L4FaultInjection\022B\n\010throttle" +
      "\030\001 \001(\01320.istio.proxy.v1.config.L4FaultIn" +
      "jection.Throttle\022D\n\tterminate\030\002 \001(\01321.is" +
      "tio.proxy.v1.config.L4FaultInjection.Ter" +
      "minate\032\373\001\n\010Throttle\022\017\n\007percent\030\001 \001(\002\022\034\n\024" +
      "downstream_limit_bps\030\002 \001(\003\022\032\n\022upstream_l" +
      "imit_bps\030\003 \001(\003\022:\n\025throttle_after_period\030" +
      "\004 \001(\0132\031.google.protobuf.DurationH\000\022\036\n\024th" +
      "rottle_after_bytes\030\005 \001(\001H\000\0226\n\023throttle_f" +
      "or_period\030\006 \001(\0132\031.google.protobuf.Durati" +
      "onB\020\n\016throttle_after\032W\n\tTerminate\022\017\n\007per" +
      "cent\030\001 \001(\002\0229\n\026terminate_after_period\030\002 \001" +
      "(\0132\031.google.protobuf.Durationb\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.google.protobuf.DurationProto.getDescriptor(),
        }, assigner);
    internal_static_istio_proxy_v1_config_L4FaultInjection_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_istio_proxy_v1_config_L4FaultInjection_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_istio_proxy_v1_config_L4FaultInjection_descriptor,
        new java.lang.String[] { "Throttle", "Terminate", });
    internal_static_istio_proxy_v1_config_L4FaultInjection_Throttle_descriptor =
      internal_static_istio_proxy_v1_config_L4FaultInjection_descriptor.getNestedTypes().get(0);
    internal_static_istio_proxy_v1_config_L4FaultInjection_Throttle_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_istio_proxy_v1_config_L4FaultInjection_Throttle_descriptor,
        new java.lang.String[] { "Percent", "DownstreamLimitBps", "UpstreamLimitBps", "ThrottleAfterPeriod", "ThrottleAfterBytes", "ThrottleForPeriod", "ThrottleAfter", });
    internal_static_istio_proxy_v1_config_L4FaultInjection_Terminate_descriptor =
      internal_static_istio_proxy_v1_config_L4FaultInjection_descriptor.getNestedTypes().get(1);
    internal_static_istio_proxy_v1_config_L4FaultInjection_Terminate_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_istio_proxy_v1_config_L4FaultInjection_Terminate_descriptor,
        new java.lang.String[] { "Percent", "TerminateAfterPeriod", });
    com.google.protobuf.DurationProto.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
