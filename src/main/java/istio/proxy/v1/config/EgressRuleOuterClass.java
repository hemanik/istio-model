// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proxy/v1/config/egress_rule.proto

package istio.proxy.v1.config;

public final class EgressRuleOuterClass {
  private EgressRuleOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface EgressRuleOrBuilder extends
      // @@protoc_insertion_point(interface_extends:istio.proxy.v1.config.EgressRule)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * REQUIRED: Hostname or a wildcard domain name associated with the external service.
     * ONLY the "service" field of destination will be taken into consideration. Name,
     * namespace, domain and labels are ignored. Routing rules and destination policies that
     * refer to these external services must have identical specification for the destination
     * as the corresponding egress rule. Wildcard domain specifications must conform to format
     * allowed by Envoy's Virtual Host specification, such as “*.foo.com” or “*-bar.foo.com”.
     * The character '*' in a domain specification indicates a non-empty string. Hence, a wildcard
     * domain of form “*-bar.foo.com” will match “baz-bar.foo.com” but not “-bar.foo.com”.
     * </pre>
     *
     * <code>.istio.proxy.v1.config.IstioService destination = 1;</code>
     */
    boolean hasDestination();
    /**
     * <pre>
     * REQUIRED: Hostname or a wildcard domain name associated with the external service.
     * ONLY the "service" field of destination will be taken into consideration. Name,
     * namespace, domain and labels are ignored. Routing rules and destination policies that
     * refer to these external services must have identical specification for the destination
     * as the corresponding egress rule. Wildcard domain specifications must conform to format
     * allowed by Envoy's Virtual Host specification, such as “*.foo.com” or “*-bar.foo.com”.
     * The character '*' in a domain specification indicates a non-empty string. Hence, a wildcard
     * domain of form “*-bar.foo.com” will match “baz-bar.foo.com” but not “-bar.foo.com”.
     * </pre>
     *
     * <code>.istio.proxy.v1.config.IstioService destination = 1;</code>
     */
    istio.proxy.v1.config.RouteRuleOuterClass.IstioService getDestination();
    /**
     * <pre>
     * REQUIRED: Hostname or a wildcard domain name associated with the external service.
     * ONLY the "service" field of destination will be taken into consideration. Name,
     * namespace, domain and labels are ignored. Routing rules and destination policies that
     * refer to these external services must have identical specification for the destination
     * as the corresponding egress rule. Wildcard domain specifications must conform to format
     * allowed by Envoy's Virtual Host specification, such as “*.foo.com” or “*-bar.foo.com”.
     * The character '*' in a domain specification indicates a non-empty string. Hence, a wildcard
     * domain of form “*-bar.foo.com” will match “baz-bar.foo.com” but not “-bar.foo.com”.
     * </pre>
     *
     * <code>.istio.proxy.v1.config.IstioService destination = 1;</code>
     */
    istio.proxy.v1.config.RouteRuleOuterClass.IstioServiceOrBuilder getDestinationOrBuilder();

    /**
     * <pre>
     * REQUIRED: list of ports on which the external service is available.
     * </pre>
     *
     * <code>repeated .istio.proxy.v1.config.EgressRule.Port ports = 2;</code>
     */
    java.util.List<istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.Port> 
        getPortsList();
    /**
     * <pre>
     * REQUIRED: list of ports on which the external service is available.
     * </pre>
     *
     * <code>repeated .istio.proxy.v1.config.EgressRule.Port ports = 2;</code>
     */
    istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.Port getPorts(int index);
    /**
     * <pre>
     * REQUIRED: list of ports on which the external service is available.
     * </pre>
     *
     * <code>repeated .istio.proxy.v1.config.EgressRule.Port ports = 2;</code>
     */
    int getPortsCount();
    /**
     * <pre>
     * REQUIRED: list of ports on which the external service is available.
     * </pre>
     *
     * <code>repeated .istio.proxy.v1.config.EgressRule.Port ports = 2;</code>
     */
    java.util.List<? extends istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.PortOrBuilder> 
        getPortsOrBuilderList();
    /**
     * <pre>
     * REQUIRED: list of ports on which the external service is available.
     * </pre>
     *
     * <code>repeated .istio.proxy.v1.config.EgressRule.Port ports = 2;</code>
     */
    istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.PortOrBuilder getPortsOrBuilder(
        int index);

    /**
     * <pre>
     * Forward all the external traffic through a dedicated egress proxy. It is used in some scenarios
     * where there is a requirement that all the external traffic goes through special dedicated nodes/pods.
     * These dedicated egress nodes could then be more closely monitored for security vulnerabilities.
     * The default is false, i.e. the sidecar forwards external traffic directly to the external service.
     * </pre>
     *
     * <code>bool use_egress_proxy = 3;</code>
     */
    boolean getUseEgressProxy();
  }
  /**
   * <pre>
   * Egress rules describe the properties of a service outside Istio. When transparent proxying
   * is used, egress rules signify a white listed set of domains that microserves in the mesh
   * are allowed to access. A subset of routing rules and all destination policies can be applied
   * on the service targeted by an egress rule. The destination of an egress rule is allowed to
   * contain wildcards (e.g., *.foo.com). Currently, only HTTP-based services can be expressed
   * through the egress rule. If TLS origination from the sidecar is desired, the protocol
   * associated with the service port must be marked as HTTPS, and the service is expected to
   * be accessed over HTTP (e.g., http://gmail.com:443). The sidecar will automatically upgrade
   * the connection to TLS when initiating a connection with the external service.
   * For example, the following egress rule describes the set of services hosted under the *.foo.com domain
   *     kind: EgressRule
   *     metadata:
   *       name: foo-egress-rule
   *     spec:
   *       destination:
   *         service: *.foo.com
   *       ports:
   *         - port: 80
   *           protocol: http
   *         - port: 443
   *           protocol: https
   * </pre>
   *
   * Protobuf type {@code istio.proxy.v1.config.EgressRule}
   */
  public  static final class EgressRule extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:istio.proxy.v1.config.EgressRule)
      EgressRuleOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use EgressRule.newBuilder() to construct.
    private EgressRule(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private EgressRule() {
      ports_ = java.util.Collections.emptyList();
      useEgressProxy_ = false;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private EgressRule(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              istio.proxy.v1.config.RouteRuleOuterClass.IstioService.Builder subBuilder = null;
              if (destination_ != null) {
                subBuilder = destination_.toBuilder();
              }
              destination_ = input.readMessage(istio.proxy.v1.config.RouteRuleOuterClass.IstioService.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(destination_);
                destination_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                ports_ = new java.util.ArrayList<istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.Port>();
                mutable_bitField0_ |= 0x00000002;
              }
              ports_.add(
                  input.readMessage(istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.Port.parser(), extensionRegistry));
              break;
            }
            case 24: {

              useEgressProxy_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          ports_ = java.util.Collections.unmodifiableList(ports_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return istio.proxy.v1.config.EgressRuleOuterClass.internal_static_istio_proxy_v1_config_EgressRule_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return istio.proxy.v1.config.EgressRuleOuterClass.internal_static_istio_proxy_v1_config_EgressRule_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.class, istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.Builder.class);
    }

    public interface PortOrBuilder extends
        // @@protoc_insertion_point(interface_extends:istio.proxy.v1.config.EgressRule.Port)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * A valid non-negative integer port number.
       * </pre>
       *
       * <code>int32 port = 1;</code>
       */
      int getPort();

      /**
       * <pre>
       * The protocol to communicate with the external services.
       * MUST BE one of HTTP|HTTPS|GRPC|HTTP2.
       * </pre>
       *
       * <code>string protocol = 2;</code>
       */
      java.lang.String getProtocol();
      /**
       * <pre>
       * The protocol to communicate with the external services.
       * MUST BE one of HTTP|HTTPS|GRPC|HTTP2.
       * </pre>
       *
       * <code>string protocol = 2;</code>
       */
      com.google.protobuf.ByteString
          getProtocolBytes();
    }
    /**
     * <pre>
     * Port describes the properties of a specific TCP port of an external service.
     * </pre>
     *
     * Protobuf type {@code istio.proxy.v1.config.EgressRule.Port}
     */
    public  static final class Port extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:istio.proxy.v1.config.EgressRule.Port)
        PortOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use Port.newBuilder() to construct.
      private Port(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private Port() {
        port_ = 0;
        protocol_ = "";
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private Port(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownFieldProto3(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {

                port_ = input.readInt32();
                break;
              }
              case 18: {
                java.lang.String s = input.readStringRequireUtf8();

                protocol_ = s;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return istio.proxy.v1.config.EgressRuleOuterClass.internal_static_istio_proxy_v1_config_EgressRule_Port_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return istio.proxy.v1.config.EgressRuleOuterClass.internal_static_istio_proxy_v1_config_EgressRule_Port_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.Port.class, istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.Port.Builder.class);
      }

      public static final int PORT_FIELD_NUMBER = 1;
      private int port_;
      /**
       * <pre>
       * A valid non-negative integer port number.
       * </pre>
       *
       * <code>int32 port = 1;</code>
       */
      public int getPort() {
        return port_;
      }

      public static final int PROTOCOL_FIELD_NUMBER = 2;
      private volatile java.lang.Object protocol_;
      /**
       * <pre>
       * The protocol to communicate with the external services.
       * MUST BE one of HTTP|HTTPS|GRPC|HTTP2.
       * </pre>
       *
       * <code>string protocol = 2;</code>
       */
      public java.lang.String getProtocol() {
        java.lang.Object ref = protocol_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          protocol_ = s;
          return s;
        }
      }
      /**
       * <pre>
       * The protocol to communicate with the external services.
       * MUST BE one of HTTP|HTTPS|GRPC|HTTP2.
       * </pre>
       *
       * <code>string protocol = 2;</code>
       */
      public com.google.protobuf.ByteString
          getProtocolBytes() {
        java.lang.Object ref = protocol_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          protocol_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (port_ != 0) {
          output.writeInt32(1, port_);
        }
        if (!getProtocolBytes().isEmpty()) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 2, protocol_);
        }
        unknownFields.writeTo(output);
      }

      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (port_ != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(1, port_);
        }
        if (!getProtocolBytes().isEmpty()) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, protocol_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.Port)) {
          return super.equals(obj);
        }
        istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.Port other = (istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.Port) obj;

        boolean result = true;
        result = result && (getPort()
            == other.getPort());
        result = result && getProtocol()
            .equals(other.getProtocol());
        result = result && unknownFields.equals(other.unknownFields);
        return result;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + PORT_FIELD_NUMBER;
        hash = (53 * hash) + getPort();
        hash = (37 * hash) + PROTOCOL_FIELD_NUMBER;
        hash = (53 * hash) + getProtocol().hashCode();
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.Port parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.Port parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.Port parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.Port parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.Port parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.Port parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.Port parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.Port parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.Port parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.Port parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.Port parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.Port parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.Port prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * Port describes the properties of a specific TCP port of an external service.
       * </pre>
       *
       * Protobuf type {@code istio.proxy.v1.config.EgressRule.Port}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:istio.proxy.v1.config.EgressRule.Port)
          istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.PortOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return istio.proxy.v1.config.EgressRuleOuterClass.internal_static_istio_proxy_v1_config_EgressRule_Port_descriptor;
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return istio.proxy.v1.config.EgressRuleOuterClass.internal_static_istio_proxy_v1_config_EgressRule_Port_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.Port.class, istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.Port.Builder.class);
        }

        // Construct using istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.Port.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        public Builder clear() {
          super.clear();
          port_ = 0;

          protocol_ = "";

          return this;
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return istio.proxy.v1.config.EgressRuleOuterClass.internal_static_istio_proxy_v1_config_EgressRule_Port_descriptor;
        }

        public istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.Port getDefaultInstanceForType() {
          return istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.Port.getDefaultInstance();
        }

        public istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.Port build() {
          istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.Port result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.Port buildPartial() {
          istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.Port result = new istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.Port(this);
          result.port_ = port_;
          result.protocol_ = protocol_;
          onBuilt();
          return result;
        }

        public Builder clone() {
          return (Builder) super.clone();
        }
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return (Builder) super.setField(field, value);
        }
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return (Builder) super.clearField(field);
        }
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return (Builder) super.clearOneof(oneof);
        }
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return (Builder) super.setRepeatedField(field, index, value);
        }
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return (Builder) super.addRepeatedField(field, value);
        }
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.Port) {
            return mergeFrom((istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.Port)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.Port other) {
          if (other == istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.Port.getDefaultInstance()) return this;
          if (other.getPort() != 0) {
            setPort(other.getPort());
          }
          if (!other.getProtocol().isEmpty()) {
            protocol_ = other.protocol_;
            onChanged();
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.Port parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.Port) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }

        private int port_ ;
        /**
         * <pre>
         * A valid non-negative integer port number.
         * </pre>
         *
         * <code>int32 port = 1;</code>
         */
        public int getPort() {
          return port_;
        }
        /**
         * <pre>
         * A valid non-negative integer port number.
         * </pre>
         *
         * <code>int32 port = 1;</code>
         */
        public Builder setPort(int value) {
          
          port_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * A valid non-negative integer port number.
         * </pre>
         *
         * <code>int32 port = 1;</code>
         */
        public Builder clearPort() {
          
          port_ = 0;
          onChanged();
          return this;
        }

        private java.lang.Object protocol_ = "";
        /**
         * <pre>
         * The protocol to communicate with the external services.
         * MUST BE one of HTTP|HTTPS|GRPC|HTTP2.
         * </pre>
         *
         * <code>string protocol = 2;</code>
         */
        public java.lang.String getProtocol() {
          java.lang.Object ref = protocol_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            protocol_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <pre>
         * The protocol to communicate with the external services.
         * MUST BE one of HTTP|HTTPS|GRPC|HTTP2.
         * </pre>
         *
         * <code>string protocol = 2;</code>
         */
        public com.google.protobuf.ByteString
            getProtocolBytes() {
          java.lang.Object ref = protocol_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            protocol_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <pre>
         * The protocol to communicate with the external services.
         * MUST BE one of HTTP|HTTPS|GRPC|HTTP2.
         * </pre>
         *
         * <code>string protocol = 2;</code>
         */
        public Builder setProtocol(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          protocol_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * The protocol to communicate with the external services.
         * MUST BE one of HTTP|HTTPS|GRPC|HTTP2.
         * </pre>
         *
         * <code>string protocol = 2;</code>
         */
        public Builder clearProtocol() {
          
          protocol_ = getDefaultInstance().getProtocol();
          onChanged();
          return this;
        }
        /**
         * <pre>
         * The protocol to communicate with the external services.
         * MUST BE one of HTTP|HTTPS|GRPC|HTTP2.
         * </pre>
         *
         * <code>string protocol = 2;</code>
         */
        public Builder setProtocolBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          protocol_ = value;
          onChanged();
          return this;
        }
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFieldsProto3(unknownFields);
        }

        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:istio.proxy.v1.config.EgressRule.Port)
      }

      // @@protoc_insertion_point(class_scope:istio.proxy.v1.config.EgressRule.Port)
      private static final istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.Port DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.Port();
      }

      public static istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.Port getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<Port>
          PARSER = new com.google.protobuf.AbstractParser<Port>() {
        public Port parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new Port(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<Port> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<Port> getParserForType() {
        return PARSER;
      }

      public istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.Port getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    private int bitField0_;
    public static final int DESTINATION_FIELD_NUMBER = 1;
    private istio.proxy.v1.config.RouteRuleOuterClass.IstioService destination_;
    /**
     * <pre>
     * REQUIRED: Hostname or a wildcard domain name associated with the external service.
     * ONLY the "service" field of destination will be taken into consideration. Name,
     * namespace, domain and labels are ignored. Routing rules and destination policies that
     * refer to these external services must have identical specification for the destination
     * as the corresponding egress rule. Wildcard domain specifications must conform to format
     * allowed by Envoy's Virtual Host specification, such as “*.foo.com” or “*-bar.foo.com”.
     * The character '*' in a domain specification indicates a non-empty string. Hence, a wildcard
     * domain of form “*-bar.foo.com” will match “baz-bar.foo.com” but not “-bar.foo.com”.
     * </pre>
     *
     * <code>.istio.proxy.v1.config.IstioService destination = 1;</code>
     */
    public boolean hasDestination() {
      return destination_ != null;
    }
    /**
     * <pre>
     * REQUIRED: Hostname or a wildcard domain name associated with the external service.
     * ONLY the "service" field of destination will be taken into consideration. Name,
     * namespace, domain and labels are ignored. Routing rules and destination policies that
     * refer to these external services must have identical specification for the destination
     * as the corresponding egress rule. Wildcard domain specifications must conform to format
     * allowed by Envoy's Virtual Host specification, such as “*.foo.com” or “*-bar.foo.com”.
     * The character '*' in a domain specification indicates a non-empty string. Hence, a wildcard
     * domain of form “*-bar.foo.com” will match “baz-bar.foo.com” but not “-bar.foo.com”.
     * </pre>
     *
     * <code>.istio.proxy.v1.config.IstioService destination = 1;</code>
     */
    public istio.proxy.v1.config.RouteRuleOuterClass.IstioService getDestination() {
      return destination_ == null ? istio.proxy.v1.config.RouteRuleOuterClass.IstioService.getDefaultInstance() : destination_;
    }
    /**
     * <pre>
     * REQUIRED: Hostname or a wildcard domain name associated with the external service.
     * ONLY the "service" field of destination will be taken into consideration. Name,
     * namespace, domain and labels are ignored. Routing rules and destination policies that
     * refer to these external services must have identical specification for the destination
     * as the corresponding egress rule. Wildcard domain specifications must conform to format
     * allowed by Envoy's Virtual Host specification, such as “*.foo.com” or “*-bar.foo.com”.
     * The character '*' in a domain specification indicates a non-empty string. Hence, a wildcard
     * domain of form “*-bar.foo.com” will match “baz-bar.foo.com” but not “-bar.foo.com”.
     * </pre>
     *
     * <code>.istio.proxy.v1.config.IstioService destination = 1;</code>
     */
    public istio.proxy.v1.config.RouteRuleOuterClass.IstioServiceOrBuilder getDestinationOrBuilder() {
      return getDestination();
    }

    public static final int PORTS_FIELD_NUMBER = 2;
    private java.util.List<istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.Port> ports_;
    /**
     * <pre>
     * REQUIRED: list of ports on which the external service is available.
     * </pre>
     *
     * <code>repeated .istio.proxy.v1.config.EgressRule.Port ports = 2;</code>
     */
    public java.util.List<istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.Port> getPortsList() {
      return ports_;
    }
    /**
     * <pre>
     * REQUIRED: list of ports on which the external service is available.
     * </pre>
     *
     * <code>repeated .istio.proxy.v1.config.EgressRule.Port ports = 2;</code>
     */
    public java.util.List<? extends istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.PortOrBuilder> 
        getPortsOrBuilderList() {
      return ports_;
    }
    /**
     * <pre>
     * REQUIRED: list of ports on which the external service is available.
     * </pre>
     *
     * <code>repeated .istio.proxy.v1.config.EgressRule.Port ports = 2;</code>
     */
    public int getPortsCount() {
      return ports_.size();
    }
    /**
     * <pre>
     * REQUIRED: list of ports on which the external service is available.
     * </pre>
     *
     * <code>repeated .istio.proxy.v1.config.EgressRule.Port ports = 2;</code>
     */
    public istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.Port getPorts(int index) {
      return ports_.get(index);
    }
    /**
     * <pre>
     * REQUIRED: list of ports on which the external service is available.
     * </pre>
     *
     * <code>repeated .istio.proxy.v1.config.EgressRule.Port ports = 2;</code>
     */
    public istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.PortOrBuilder getPortsOrBuilder(
        int index) {
      return ports_.get(index);
    }

    public static final int USE_EGRESS_PROXY_FIELD_NUMBER = 3;
    private boolean useEgressProxy_;
    /**
     * <pre>
     * Forward all the external traffic through a dedicated egress proxy. It is used in some scenarios
     * where there is a requirement that all the external traffic goes through special dedicated nodes/pods.
     * These dedicated egress nodes could then be more closely monitored for security vulnerabilities.
     * The default is false, i.e. the sidecar forwards external traffic directly to the external service.
     * </pre>
     *
     * <code>bool use_egress_proxy = 3;</code>
     */
    public boolean getUseEgressProxy() {
      return useEgressProxy_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (destination_ != null) {
        output.writeMessage(1, getDestination());
      }
      for (int i = 0; i < ports_.size(); i++) {
        output.writeMessage(2, ports_.get(i));
      }
      if (useEgressProxy_ != false) {
        output.writeBool(3, useEgressProxy_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (destination_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getDestination());
      }
      for (int i = 0; i < ports_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, ports_.get(i));
      }
      if (useEgressProxy_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, useEgressProxy_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof istio.proxy.v1.config.EgressRuleOuterClass.EgressRule)) {
        return super.equals(obj);
      }
      istio.proxy.v1.config.EgressRuleOuterClass.EgressRule other = (istio.proxy.v1.config.EgressRuleOuterClass.EgressRule) obj;

      boolean result = true;
      result = result && (hasDestination() == other.hasDestination());
      if (hasDestination()) {
        result = result && getDestination()
            .equals(other.getDestination());
      }
      result = result && getPortsList()
          .equals(other.getPortsList());
      result = result && (getUseEgressProxy()
          == other.getUseEgressProxy());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasDestination()) {
        hash = (37 * hash) + DESTINATION_FIELD_NUMBER;
        hash = (53 * hash) + getDestination().hashCode();
      }
      if (getPortsCount() > 0) {
        hash = (37 * hash) + PORTS_FIELD_NUMBER;
        hash = (53 * hash) + getPortsList().hashCode();
      }
      hash = (37 * hash) + USE_EGRESS_PROXY_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getUseEgressProxy());
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static istio.proxy.v1.config.EgressRuleOuterClass.EgressRule parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static istio.proxy.v1.config.EgressRuleOuterClass.EgressRule parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static istio.proxy.v1.config.EgressRuleOuterClass.EgressRule parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static istio.proxy.v1.config.EgressRuleOuterClass.EgressRule parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static istio.proxy.v1.config.EgressRuleOuterClass.EgressRule parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static istio.proxy.v1.config.EgressRuleOuterClass.EgressRule parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static istio.proxy.v1.config.EgressRuleOuterClass.EgressRule parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static istio.proxy.v1.config.EgressRuleOuterClass.EgressRule parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static istio.proxy.v1.config.EgressRuleOuterClass.EgressRule parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static istio.proxy.v1.config.EgressRuleOuterClass.EgressRule parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static istio.proxy.v1.config.EgressRuleOuterClass.EgressRule parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static istio.proxy.v1.config.EgressRuleOuterClass.EgressRule parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(istio.proxy.v1.config.EgressRuleOuterClass.EgressRule prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Egress rules describe the properties of a service outside Istio. When transparent proxying
     * is used, egress rules signify a white listed set of domains that microserves in the mesh
     * are allowed to access. A subset of routing rules and all destination policies can be applied
     * on the service targeted by an egress rule. The destination of an egress rule is allowed to
     * contain wildcards (e.g., *.foo.com). Currently, only HTTP-based services can be expressed
     * through the egress rule. If TLS origination from the sidecar is desired, the protocol
     * associated with the service port must be marked as HTTPS, and the service is expected to
     * be accessed over HTTP (e.g., http://gmail.com:443). The sidecar will automatically upgrade
     * the connection to TLS when initiating a connection with the external service.
     * For example, the following egress rule describes the set of services hosted under the *.foo.com domain
     *     kind: EgressRule
     *     metadata:
     *       name: foo-egress-rule
     *     spec:
     *       destination:
     *         service: *.foo.com
     *       ports:
     *         - port: 80
     *           protocol: http
     *         - port: 443
     *           protocol: https
     * </pre>
     *
     * Protobuf type {@code istio.proxy.v1.config.EgressRule}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:istio.proxy.v1.config.EgressRule)
        istio.proxy.v1.config.EgressRuleOuterClass.EgressRuleOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return istio.proxy.v1.config.EgressRuleOuterClass.internal_static_istio_proxy_v1_config_EgressRule_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return istio.proxy.v1.config.EgressRuleOuterClass.internal_static_istio_proxy_v1_config_EgressRule_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.class, istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.Builder.class);
      }

      // Construct using istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getPortsFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        if (destinationBuilder_ == null) {
          destination_ = null;
        } else {
          destination_ = null;
          destinationBuilder_ = null;
        }
        if (portsBuilder_ == null) {
          ports_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          portsBuilder_.clear();
        }
        useEgressProxy_ = false;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return istio.proxy.v1.config.EgressRuleOuterClass.internal_static_istio_proxy_v1_config_EgressRule_descriptor;
      }

      public istio.proxy.v1.config.EgressRuleOuterClass.EgressRule getDefaultInstanceForType() {
        return istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.getDefaultInstance();
      }

      public istio.proxy.v1.config.EgressRuleOuterClass.EgressRule build() {
        istio.proxy.v1.config.EgressRuleOuterClass.EgressRule result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public istio.proxy.v1.config.EgressRuleOuterClass.EgressRule buildPartial() {
        istio.proxy.v1.config.EgressRuleOuterClass.EgressRule result = new istio.proxy.v1.config.EgressRuleOuterClass.EgressRule(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (destinationBuilder_ == null) {
          result.destination_ = destination_;
        } else {
          result.destination_ = destinationBuilder_.build();
        }
        if (portsBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            ports_ = java.util.Collections.unmodifiableList(ports_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.ports_ = ports_;
        } else {
          result.ports_ = portsBuilder_.build();
        }
        result.useEgressProxy_ = useEgressProxy_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof istio.proxy.v1.config.EgressRuleOuterClass.EgressRule) {
          return mergeFrom((istio.proxy.v1.config.EgressRuleOuterClass.EgressRule)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(istio.proxy.v1.config.EgressRuleOuterClass.EgressRule other) {
        if (other == istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.getDefaultInstance()) return this;
        if (other.hasDestination()) {
          mergeDestination(other.getDestination());
        }
        if (portsBuilder_ == null) {
          if (!other.ports_.isEmpty()) {
            if (ports_.isEmpty()) {
              ports_ = other.ports_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensurePortsIsMutable();
              ports_.addAll(other.ports_);
            }
            onChanged();
          }
        } else {
          if (!other.ports_.isEmpty()) {
            if (portsBuilder_.isEmpty()) {
              portsBuilder_.dispose();
              portsBuilder_ = null;
              ports_ = other.ports_;
              bitField0_ = (bitField0_ & ~0x00000002);
              portsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getPortsFieldBuilder() : null;
            } else {
              portsBuilder_.addAllMessages(other.ports_);
            }
          }
        }
        if (other.getUseEgressProxy() != false) {
          setUseEgressProxy(other.getUseEgressProxy());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        istio.proxy.v1.config.EgressRuleOuterClass.EgressRule parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (istio.proxy.v1.config.EgressRuleOuterClass.EgressRule) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private istio.proxy.v1.config.RouteRuleOuterClass.IstioService destination_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          istio.proxy.v1.config.RouteRuleOuterClass.IstioService, istio.proxy.v1.config.RouteRuleOuterClass.IstioService.Builder, istio.proxy.v1.config.RouteRuleOuterClass.IstioServiceOrBuilder> destinationBuilder_;
      /**
       * <pre>
       * REQUIRED: Hostname or a wildcard domain name associated with the external service.
       * ONLY the "service" field of destination will be taken into consideration. Name,
       * namespace, domain and labels are ignored. Routing rules and destination policies that
       * refer to these external services must have identical specification for the destination
       * as the corresponding egress rule. Wildcard domain specifications must conform to format
       * allowed by Envoy's Virtual Host specification, such as “*.foo.com” or “*-bar.foo.com”.
       * The character '*' in a domain specification indicates a non-empty string. Hence, a wildcard
       * domain of form “*-bar.foo.com” will match “baz-bar.foo.com” but not “-bar.foo.com”.
       * </pre>
       *
       * <code>.istio.proxy.v1.config.IstioService destination = 1;</code>
       */
      public boolean hasDestination() {
        return destinationBuilder_ != null || destination_ != null;
      }
      /**
       * <pre>
       * REQUIRED: Hostname or a wildcard domain name associated with the external service.
       * ONLY the "service" field of destination will be taken into consideration. Name,
       * namespace, domain and labels are ignored. Routing rules and destination policies that
       * refer to these external services must have identical specification for the destination
       * as the corresponding egress rule. Wildcard domain specifications must conform to format
       * allowed by Envoy's Virtual Host specification, such as “*.foo.com” or “*-bar.foo.com”.
       * The character '*' in a domain specification indicates a non-empty string. Hence, a wildcard
       * domain of form “*-bar.foo.com” will match “baz-bar.foo.com” but not “-bar.foo.com”.
       * </pre>
       *
       * <code>.istio.proxy.v1.config.IstioService destination = 1;</code>
       */
      public istio.proxy.v1.config.RouteRuleOuterClass.IstioService getDestination() {
        if (destinationBuilder_ == null) {
          return destination_ == null ? istio.proxy.v1.config.RouteRuleOuterClass.IstioService.getDefaultInstance() : destination_;
        } else {
          return destinationBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * REQUIRED: Hostname or a wildcard domain name associated with the external service.
       * ONLY the "service" field of destination will be taken into consideration. Name,
       * namespace, domain and labels are ignored. Routing rules and destination policies that
       * refer to these external services must have identical specification for the destination
       * as the corresponding egress rule. Wildcard domain specifications must conform to format
       * allowed by Envoy's Virtual Host specification, such as “*.foo.com” or “*-bar.foo.com”.
       * The character '*' in a domain specification indicates a non-empty string. Hence, a wildcard
       * domain of form “*-bar.foo.com” will match “baz-bar.foo.com” but not “-bar.foo.com”.
       * </pre>
       *
       * <code>.istio.proxy.v1.config.IstioService destination = 1;</code>
       */
      public Builder setDestination(istio.proxy.v1.config.RouteRuleOuterClass.IstioService value) {
        if (destinationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          destination_ = value;
          onChanged();
        } else {
          destinationBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * REQUIRED: Hostname or a wildcard domain name associated with the external service.
       * ONLY the "service" field of destination will be taken into consideration. Name,
       * namespace, domain and labels are ignored. Routing rules and destination policies that
       * refer to these external services must have identical specification for the destination
       * as the corresponding egress rule. Wildcard domain specifications must conform to format
       * allowed by Envoy's Virtual Host specification, such as “*.foo.com” or “*-bar.foo.com”.
       * The character '*' in a domain specification indicates a non-empty string. Hence, a wildcard
       * domain of form “*-bar.foo.com” will match “baz-bar.foo.com” but not “-bar.foo.com”.
       * </pre>
       *
       * <code>.istio.proxy.v1.config.IstioService destination = 1;</code>
       */
      public Builder setDestination(
          istio.proxy.v1.config.RouteRuleOuterClass.IstioService.Builder builderForValue) {
        if (destinationBuilder_ == null) {
          destination_ = builderForValue.build();
          onChanged();
        } else {
          destinationBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * REQUIRED: Hostname or a wildcard domain name associated with the external service.
       * ONLY the "service" field of destination will be taken into consideration. Name,
       * namespace, domain and labels are ignored. Routing rules and destination policies that
       * refer to these external services must have identical specification for the destination
       * as the corresponding egress rule. Wildcard domain specifications must conform to format
       * allowed by Envoy's Virtual Host specification, such as “*.foo.com” or “*-bar.foo.com”.
       * The character '*' in a domain specification indicates a non-empty string. Hence, a wildcard
       * domain of form “*-bar.foo.com” will match “baz-bar.foo.com” but not “-bar.foo.com”.
       * </pre>
       *
       * <code>.istio.proxy.v1.config.IstioService destination = 1;</code>
       */
      public Builder mergeDestination(istio.proxy.v1.config.RouteRuleOuterClass.IstioService value) {
        if (destinationBuilder_ == null) {
          if (destination_ != null) {
            destination_ =
              istio.proxy.v1.config.RouteRuleOuterClass.IstioService.newBuilder(destination_).mergeFrom(value).buildPartial();
          } else {
            destination_ = value;
          }
          onChanged();
        } else {
          destinationBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * REQUIRED: Hostname or a wildcard domain name associated with the external service.
       * ONLY the "service" field of destination will be taken into consideration. Name,
       * namespace, domain and labels are ignored. Routing rules and destination policies that
       * refer to these external services must have identical specification for the destination
       * as the corresponding egress rule. Wildcard domain specifications must conform to format
       * allowed by Envoy's Virtual Host specification, such as “*.foo.com” or “*-bar.foo.com”.
       * The character '*' in a domain specification indicates a non-empty string. Hence, a wildcard
       * domain of form “*-bar.foo.com” will match “baz-bar.foo.com” but not “-bar.foo.com”.
       * </pre>
       *
       * <code>.istio.proxy.v1.config.IstioService destination = 1;</code>
       */
      public Builder clearDestination() {
        if (destinationBuilder_ == null) {
          destination_ = null;
          onChanged();
        } else {
          destination_ = null;
          destinationBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * REQUIRED: Hostname or a wildcard domain name associated with the external service.
       * ONLY the "service" field of destination will be taken into consideration. Name,
       * namespace, domain and labels are ignored. Routing rules and destination policies that
       * refer to these external services must have identical specification for the destination
       * as the corresponding egress rule. Wildcard domain specifications must conform to format
       * allowed by Envoy's Virtual Host specification, such as “*.foo.com” or “*-bar.foo.com”.
       * The character '*' in a domain specification indicates a non-empty string. Hence, a wildcard
       * domain of form “*-bar.foo.com” will match “baz-bar.foo.com” but not “-bar.foo.com”.
       * </pre>
       *
       * <code>.istio.proxy.v1.config.IstioService destination = 1;</code>
       */
      public istio.proxy.v1.config.RouteRuleOuterClass.IstioService.Builder getDestinationBuilder() {
        
        onChanged();
        return getDestinationFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * REQUIRED: Hostname or a wildcard domain name associated with the external service.
       * ONLY the "service" field of destination will be taken into consideration. Name,
       * namespace, domain and labels are ignored. Routing rules and destination policies that
       * refer to these external services must have identical specification for the destination
       * as the corresponding egress rule. Wildcard domain specifications must conform to format
       * allowed by Envoy's Virtual Host specification, such as “*.foo.com” or “*-bar.foo.com”.
       * The character '*' in a domain specification indicates a non-empty string. Hence, a wildcard
       * domain of form “*-bar.foo.com” will match “baz-bar.foo.com” but not “-bar.foo.com”.
       * </pre>
       *
       * <code>.istio.proxy.v1.config.IstioService destination = 1;</code>
       */
      public istio.proxy.v1.config.RouteRuleOuterClass.IstioServiceOrBuilder getDestinationOrBuilder() {
        if (destinationBuilder_ != null) {
          return destinationBuilder_.getMessageOrBuilder();
        } else {
          return destination_ == null ?
              istio.proxy.v1.config.RouteRuleOuterClass.IstioService.getDefaultInstance() : destination_;
        }
      }
      /**
       * <pre>
       * REQUIRED: Hostname or a wildcard domain name associated with the external service.
       * ONLY the "service" field of destination will be taken into consideration. Name,
       * namespace, domain and labels are ignored. Routing rules and destination policies that
       * refer to these external services must have identical specification for the destination
       * as the corresponding egress rule. Wildcard domain specifications must conform to format
       * allowed by Envoy's Virtual Host specification, such as “*.foo.com” or “*-bar.foo.com”.
       * The character '*' in a domain specification indicates a non-empty string. Hence, a wildcard
       * domain of form “*-bar.foo.com” will match “baz-bar.foo.com” but not “-bar.foo.com”.
       * </pre>
       *
       * <code>.istio.proxy.v1.config.IstioService destination = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          istio.proxy.v1.config.RouteRuleOuterClass.IstioService, istio.proxy.v1.config.RouteRuleOuterClass.IstioService.Builder, istio.proxy.v1.config.RouteRuleOuterClass.IstioServiceOrBuilder> 
          getDestinationFieldBuilder() {
        if (destinationBuilder_ == null) {
          destinationBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              istio.proxy.v1.config.RouteRuleOuterClass.IstioService, istio.proxy.v1.config.RouteRuleOuterClass.IstioService.Builder, istio.proxy.v1.config.RouteRuleOuterClass.IstioServiceOrBuilder>(
                  getDestination(),
                  getParentForChildren(),
                  isClean());
          destination_ = null;
        }
        return destinationBuilder_;
      }

      private java.util.List<istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.Port> ports_ =
        java.util.Collections.emptyList();
      private void ensurePortsIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          ports_ = new java.util.ArrayList<istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.Port>(ports_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.Port, istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.Port.Builder, istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.PortOrBuilder> portsBuilder_;

      /**
       * <pre>
       * REQUIRED: list of ports on which the external service is available.
       * </pre>
       *
       * <code>repeated .istio.proxy.v1.config.EgressRule.Port ports = 2;</code>
       */
      public java.util.List<istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.Port> getPortsList() {
        if (portsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(ports_);
        } else {
          return portsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * REQUIRED: list of ports on which the external service is available.
       * </pre>
       *
       * <code>repeated .istio.proxy.v1.config.EgressRule.Port ports = 2;</code>
       */
      public int getPortsCount() {
        if (portsBuilder_ == null) {
          return ports_.size();
        } else {
          return portsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * REQUIRED: list of ports on which the external service is available.
       * </pre>
       *
       * <code>repeated .istio.proxy.v1.config.EgressRule.Port ports = 2;</code>
       */
      public istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.Port getPorts(int index) {
        if (portsBuilder_ == null) {
          return ports_.get(index);
        } else {
          return portsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * REQUIRED: list of ports on which the external service is available.
       * </pre>
       *
       * <code>repeated .istio.proxy.v1.config.EgressRule.Port ports = 2;</code>
       */
      public Builder setPorts(
          int index, istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.Port value) {
        if (portsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePortsIsMutable();
          ports_.set(index, value);
          onChanged();
        } else {
          portsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * REQUIRED: list of ports on which the external service is available.
       * </pre>
       *
       * <code>repeated .istio.proxy.v1.config.EgressRule.Port ports = 2;</code>
       */
      public Builder setPorts(
          int index, istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.Port.Builder builderForValue) {
        if (portsBuilder_ == null) {
          ensurePortsIsMutable();
          ports_.set(index, builderForValue.build());
          onChanged();
        } else {
          portsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * REQUIRED: list of ports on which the external service is available.
       * </pre>
       *
       * <code>repeated .istio.proxy.v1.config.EgressRule.Port ports = 2;</code>
       */
      public Builder addPorts(istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.Port value) {
        if (portsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePortsIsMutable();
          ports_.add(value);
          onChanged();
        } else {
          portsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * REQUIRED: list of ports on which the external service is available.
       * </pre>
       *
       * <code>repeated .istio.proxy.v1.config.EgressRule.Port ports = 2;</code>
       */
      public Builder addPorts(
          int index, istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.Port value) {
        if (portsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePortsIsMutable();
          ports_.add(index, value);
          onChanged();
        } else {
          portsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * REQUIRED: list of ports on which the external service is available.
       * </pre>
       *
       * <code>repeated .istio.proxy.v1.config.EgressRule.Port ports = 2;</code>
       */
      public Builder addPorts(
          istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.Port.Builder builderForValue) {
        if (portsBuilder_ == null) {
          ensurePortsIsMutable();
          ports_.add(builderForValue.build());
          onChanged();
        } else {
          portsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * REQUIRED: list of ports on which the external service is available.
       * </pre>
       *
       * <code>repeated .istio.proxy.v1.config.EgressRule.Port ports = 2;</code>
       */
      public Builder addPorts(
          int index, istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.Port.Builder builderForValue) {
        if (portsBuilder_ == null) {
          ensurePortsIsMutable();
          ports_.add(index, builderForValue.build());
          onChanged();
        } else {
          portsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * REQUIRED: list of ports on which the external service is available.
       * </pre>
       *
       * <code>repeated .istio.proxy.v1.config.EgressRule.Port ports = 2;</code>
       */
      public Builder addAllPorts(
          java.lang.Iterable<? extends istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.Port> values) {
        if (portsBuilder_ == null) {
          ensurePortsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, ports_);
          onChanged();
        } else {
          portsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * REQUIRED: list of ports on which the external service is available.
       * </pre>
       *
       * <code>repeated .istio.proxy.v1.config.EgressRule.Port ports = 2;</code>
       */
      public Builder clearPorts() {
        if (portsBuilder_ == null) {
          ports_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          portsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * REQUIRED: list of ports on which the external service is available.
       * </pre>
       *
       * <code>repeated .istio.proxy.v1.config.EgressRule.Port ports = 2;</code>
       */
      public Builder removePorts(int index) {
        if (portsBuilder_ == null) {
          ensurePortsIsMutable();
          ports_.remove(index);
          onChanged();
        } else {
          portsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * REQUIRED: list of ports on which the external service is available.
       * </pre>
       *
       * <code>repeated .istio.proxy.v1.config.EgressRule.Port ports = 2;</code>
       */
      public istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.Port.Builder getPortsBuilder(
          int index) {
        return getPortsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * REQUIRED: list of ports on which the external service is available.
       * </pre>
       *
       * <code>repeated .istio.proxy.v1.config.EgressRule.Port ports = 2;</code>
       */
      public istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.PortOrBuilder getPortsOrBuilder(
          int index) {
        if (portsBuilder_ == null) {
          return ports_.get(index);  } else {
          return portsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * REQUIRED: list of ports on which the external service is available.
       * </pre>
       *
       * <code>repeated .istio.proxy.v1.config.EgressRule.Port ports = 2;</code>
       */
      public java.util.List<? extends istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.PortOrBuilder> 
           getPortsOrBuilderList() {
        if (portsBuilder_ != null) {
          return portsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(ports_);
        }
      }
      /**
       * <pre>
       * REQUIRED: list of ports on which the external service is available.
       * </pre>
       *
       * <code>repeated .istio.proxy.v1.config.EgressRule.Port ports = 2;</code>
       */
      public istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.Port.Builder addPortsBuilder() {
        return getPortsFieldBuilder().addBuilder(
            istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.Port.getDefaultInstance());
      }
      /**
       * <pre>
       * REQUIRED: list of ports on which the external service is available.
       * </pre>
       *
       * <code>repeated .istio.proxy.v1.config.EgressRule.Port ports = 2;</code>
       */
      public istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.Port.Builder addPortsBuilder(
          int index) {
        return getPortsFieldBuilder().addBuilder(
            index, istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.Port.getDefaultInstance());
      }
      /**
       * <pre>
       * REQUIRED: list of ports on which the external service is available.
       * </pre>
       *
       * <code>repeated .istio.proxy.v1.config.EgressRule.Port ports = 2;</code>
       */
      public java.util.List<istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.Port.Builder> 
           getPortsBuilderList() {
        return getPortsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.Port, istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.Port.Builder, istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.PortOrBuilder> 
          getPortsFieldBuilder() {
        if (portsBuilder_ == null) {
          portsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.Port, istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.Port.Builder, istio.proxy.v1.config.EgressRuleOuterClass.EgressRule.PortOrBuilder>(
                  ports_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          ports_ = null;
        }
        return portsBuilder_;
      }

      private boolean useEgressProxy_ ;
      /**
       * <pre>
       * Forward all the external traffic through a dedicated egress proxy. It is used in some scenarios
       * where there is a requirement that all the external traffic goes through special dedicated nodes/pods.
       * These dedicated egress nodes could then be more closely monitored for security vulnerabilities.
       * The default is false, i.e. the sidecar forwards external traffic directly to the external service.
       * </pre>
       *
       * <code>bool use_egress_proxy = 3;</code>
       */
      public boolean getUseEgressProxy() {
        return useEgressProxy_;
      }
      /**
       * <pre>
       * Forward all the external traffic through a dedicated egress proxy. It is used in some scenarios
       * where there is a requirement that all the external traffic goes through special dedicated nodes/pods.
       * These dedicated egress nodes could then be more closely monitored for security vulnerabilities.
       * The default is false, i.e. the sidecar forwards external traffic directly to the external service.
       * </pre>
       *
       * <code>bool use_egress_proxy = 3;</code>
       */
      public Builder setUseEgressProxy(boolean value) {
        
        useEgressProxy_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Forward all the external traffic through a dedicated egress proxy. It is used in some scenarios
       * where there is a requirement that all the external traffic goes through special dedicated nodes/pods.
       * These dedicated egress nodes could then be more closely monitored for security vulnerabilities.
       * The default is false, i.e. the sidecar forwards external traffic directly to the external service.
       * </pre>
       *
       * <code>bool use_egress_proxy = 3;</code>
       */
      public Builder clearUseEgressProxy() {
        
        useEgressProxy_ = false;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:istio.proxy.v1.config.EgressRule)
    }

    // @@protoc_insertion_point(class_scope:istio.proxy.v1.config.EgressRule)
    private static final istio.proxy.v1.config.EgressRuleOuterClass.EgressRule DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new istio.proxy.v1.config.EgressRuleOuterClass.EgressRule();
    }

    public static istio.proxy.v1.config.EgressRuleOuterClass.EgressRule getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<EgressRule>
        PARSER = new com.google.protobuf.AbstractParser<EgressRule>() {
      public EgressRule parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new EgressRule(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<EgressRule> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<EgressRule> getParserForType() {
      return PARSER;
    }

    public istio.proxy.v1.config.EgressRuleOuterClass.EgressRule getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_istio_proxy_v1_config_EgressRule_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_istio_proxy_v1_config_EgressRule_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_istio_proxy_v1_config_EgressRule_Port_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_istio_proxy_v1_config_EgressRule_Port_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n!proxy/v1/config/egress_rule.proto\022\025ist" +
      "io.proxy.v1.config\032 proxy/v1/config/rout" +
      "e_rule.proto\"\277\001\n\nEgressRule\0228\n\013destinati" +
      "on\030\001 \001(\0132#.istio.proxy.v1.config.IstioSe" +
      "rvice\0225\n\005ports\030\002 \003(\0132&.istio.proxy.v1.co" +
      "nfig.EgressRule.Port\022\030\n\020use_egress_proxy" +
      "\030\003 \001(\010\032&\n\004Port\022\014\n\004port\030\001 \001(\005\022\020\n\010protocol" +
      "\030\002 \001(\tb\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          istio.proxy.v1.config.RouteRuleOuterClass.getDescriptor(),
        }, assigner);
    internal_static_istio_proxy_v1_config_EgressRule_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_istio_proxy_v1_config_EgressRule_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_istio_proxy_v1_config_EgressRule_descriptor,
        new java.lang.String[] { "Destination", "Ports", "UseEgressProxy", });
    internal_static_istio_proxy_v1_config_EgressRule_Port_descriptor =
      internal_static_istio_proxy_v1_config_EgressRule_descriptor.getNestedTypes().get(0);
    internal_static_istio_proxy_v1_config_EgressRule_Port_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_istio_proxy_v1_config_EgressRule_Port_descriptor,
        new java.lang.String[] { "Port", "Protocol", });
    istio.proxy.v1.config.RouteRuleOuterClass.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
